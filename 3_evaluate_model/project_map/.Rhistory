upper_10 <- raster::calc(yld.m, fun=function(x){ x[x < 194.5] <- NA; return(x)} )
plot(lower_10)
plot(upper_10)
upper_10
plot(lower_10)
(lower_10)
freq(lower_10, value=NA)
freq(upper_10, value=NA)
freq(yld.m, value=NA)
yld.m
559977 - freq(yld.m, value=NA)
559977 - freq(upper_10, value=NA)
559977 - freq(lower_10, value=NA)
enm <- raster("/Users/ebellis/Desktop/Projects/StigaxSorghum/ENMs/all.CLY250.tif")
plot(enm)
?extent
extent(-5,5,34,42)
e <- extent(-5,5,34,42)
ls
enm_kenya <- crop(enm, e)
plot(enm_kenya)
enm_kenya
enm
?crop
e
e <- extent(33,45,-6,6)
enm_kenya <- crop(enm, e)
plot(enm_kenya)
writeRaster(enm_kenya, "Sther_ENM.tif")
?writeRaster
writeRaster(enm_kenya, "Sther_ENM.tif", format="GTiff")
writeRaster(enm_kenya, "Sther_ENM.tif", format="GTiff", overwrite=T)
writeRaster(enm_kenya, "~/Documents/GitHub/PEER_workshop/4_R_Spatial_Data/Sther_ENM.tif", format="GTiff", overwrite=T)
library(tmap)
library(tmaptools)
Kenya1<-getData("GADM", country="KE", level=1)
Kenya<-getData("GADM", country="KE", level=0)
Kenya1_UTM<-spTransform(Kenya1, CRS("+init=EPSG:32737"))
Kenya0_UTM<-spTransform(Kenya, CRS("+init=EPSG:32737"))
Kenya1_UTM
Kenya1
Kenya1_UTM@data$NAME_1
Kenya1_UTM[Kenya1_UTM@data$NAME_1 == "Busia",]
counties <-Kenya1_UTM[Kenya1_UTM@data$NAME_1 == "Busia"| Kenya1_UTM@data$NAME_1 == "Kisumu",]
counties <-Kenya1_UTM[Kenya1_UTM@data$NAME_1 == "Busia"|| Kenya1_UTM@data$NAME_1 == "Kisumu",]
Kenya1_UTM[Kenya1_UTM@data$NAME_1 == "Busia",]
counties
counties <-Kenya1_UTM[Kenya1_UTM@data$NAME_1 == "Busia"| Kenya1_UTM@data$NAME_1 == "Kisumu",]
counties
counties_sf <- as(counties, Class = "sf")
kenya_sf <- as(Kenya0_UTM, Class="sf")
kenya_smooth <- simplify_shape(kenya_sf, 0.01)
install.packages('rmapshaper')
tm_shape(kenya_smooth) +
tm_polygons()
kenya_smooth <- simplify_shape(kenya_sf, 0.01)
tm_shape(kenya_smooth) +
tm_polygons()
tm_shape(kenya_smooth) +
tm_polygons() +
tm_shape(counties) +
tm_polygons(col="tomato4")
tm_shape(kenya_smooth) +
tm_polygons() +
tm_shape(counties) +
tm_polygons(col="tomato4")
enm <- raster('/Users/ebellis/Documents/GitHub/PEER_workshop/4_R_Spatial_Data/Sther_ENM.tif')
enm
plot(enm)
crop(enm, kenya_smooth)
mask(enm, kenya_smooth)
?mask
mask(enm, kenya_smooth)
enm
kenya
enm
kenya_smooth
?project
project(enm, kenya_smooth)
raster::project(enm, kenya_smooth)
project(enm, Kenya1)
raster::project(enm, Kenya1)
rgdal::project(enm, Kenya1)
spTransform(enm, CRS("+init=EPSG:32737"))
?spTransform
rgdal::project(enm, crs="utm")
projectRaster(enm, Kenya1)
projectRaster(enm, kenya_smooth)
projectRaster(enm, kenya_sf)
?projectRaster
projectRaster(enm)
kenya_smooth
projectRaster(enm, crs="+init=EPSG:32737 +proj=utm +zone=37 +south +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0")
projectRaster(enm, Kenya1)
projectRaster(enm, Kenya1_UTM)
projectRaster(enm, crs="+init=EPSG:32737 +proj=utm +zone=37 +south +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0")
enm_utm <- projectRaster(enm, crs="+init=EPSG:32737 +proj=utm +zone=37 +south +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0")
crop(enm_utm, kenya_smooth)
enm_kenya <- crop(enm_utm, kenya_smooth)
plot(enm)
enm_kenya <- mask(enm_utm, kenya_smooth)
plot(enm)
enm_kenya <- crop(enm_utm, kenya_smooth)
plot(enm_kenya)
enm_kenya <- mask(enm_utm, kenya_smooth)
plot(enm_kenya)
plot(enm_kenya, col=viridis())
install.packages("viridis")
plot(enm_kenya, col=viridis())
library(viridis)
plot(enm_kenya, col=viridis())
plot(enm_kenya, col=viridis(10))
plot(enm_kenya, col=viridis(10), alpha=0.5)
plot(enm_kenya, col=viridis(10), alpha=0.5)
tm_shape(enm_kenya) +
tm_raster() +
tm_shape(kenya_smooth) +
tm_borders()
tm_shape(enm_kenya) +
tm_raster() +
tm_shape(kenya_smooth) +
tm_borders() +
tm_layout(legend.outside=T)
tm_shape(enm_kenya) +
tm_raster() +
tm_shape(kenya_smooth) +
tm_borders() +
tm_layout(legend.outside=T) +
tm_scale_bar(width=0.2)
tm_shape(enm_kenya) +
tm_raster() +
tm_shape(kenya_smooth) +
tm_borders() +
tm_layout(legend.outside=T) +
tm_scale_bar(width=0.1)
tm_shape(enm_kenya) +
tm_raster() +
tm_shape(kenya_smooth) +
tm_borders() +
tm_layout(legend.outside=T) +
tm_scale_bar(width=0.07)
tm_shape(enm_kenya) +
tm_raster() +
tm_shape(kenya_smooth) +
tm_borders() +
tm_layout(legend.outside=T) +
tm_scale_bar(width=0.1)
tm_shape(enm_kenya) +
tm_raster() +
tm_shape(kenya_smooth) +
tm_borders() +
tm_layout(legend.outside=T) +
tm_scale_bar(width=0.05)
tm_shape(enm_kenya) +
tm_raster() +
tm_shape(kenya_smooth) +
tm_borders() +
tm_layout(legend.outside=T) +
tm_scale_bar(width=0.1)
sqrt(155)
sqrt(155)/176
1/32
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
k31 <- read.table("k31.mash.out", header=F)
k31 <- k31 %>% select(1:3)
library(tidyverse)
k31 <- read.table("k31.mash.out", header=F)
k31 <- k31 %>% select(1:3)
colnames(k31) <- c("S1","S2","dist")
head(k31)
k21 <- read.table("k21.mash.out", header=F)
k21 <- k21 %>% select(1:3)
colnames(k21) <- c("S1","S2","dist")
meta <- read.csv('Striga_GPS.csv', header=T)
head(meta)
meta$Site <- as.factor(str_replace(meta$Site, "2","") %>% str_trim())
head(meta)
nrow(site)
nrow(meta)
meta %>% filter(SampleID %in% unique(k21$S1))
unique(k21$S1)
meta <- read.csv('Striga_GPS.csv', header=T)
meta$Site <- as.factor(str_replace(meta$Site, "2","") %>% str_trim())
meta <- meta %>% filter(SampleID %in% unique(k21$S1))
meta
list5per <- filter(meta, Site != "Kisii" & Site != "HomaBay")$SampleID
unique(k21$S1))
list5per
list5per <- c(list5per, "SH130", "SH134", "SH138", "SH139","SH146","SH124","SH117","SH113","SH111","SH104")
list5per
list5per <- filter(meta, Site != "Kisii" & Site != "HomaBay")$SampleID
list5per
list5per <- c(list5per, "SH130", "SH134", "SH138", "SH139","SH146","SH124","SH117","SH113","SH111","SH104")
list5per
list5per <- filter(meta, Site != "Kisii" & Site != "HomaBay")$SampleID
list5per <- cbind(list5per, "SH130", "SH134", "SH138", "SH139","SH146","SH124","SH117","SH113","SH111","SH104")
list5per
list5per <- filter(meta, Site != "Kisii" & Site != "HomaBay")$SampleID
class(list5per)
list5per <- cbind(list5per, SH130, SH134, SH138, SH139,SH146,SH124,SH117,SH113,SH111,SH104)
list5per <- c("SH130", "SH134", "SH138", "SH139","SH146","SH124","SH117","SH113","SH111","SH104")
list5per
as.factor(list5per)
list5per <- filter(meta, Site != "Kisii" & Site != "HomaBay")$SampleID
list5per <- c(list5per, as.factor("SH130", "SH134", "SH138", "SH139","SH146","SH124","SH117","SH113","SH111","SH104"))
list5per <- filter(meta, Site != "Kisii" & Site != "HomaBay")$SampleID
list5per
list5perkh <- filter(meta, SampleID =="SH130" | "SH134"|"SH138"| "SH139"|"SH146"|"SH124"|"SH117"|"SH113"|"SH111"|"SH104"))
list5perkh <- filter(meta, SampleID =="SH130" | "SH134"|"SH138"| "SH139"|"SH146"|"SH124"|"SH117"|"SH113"|"SH111"|"SH104")
knitr::opts_chunk$set(echo = TRUE)
setwd('/Users/emilywork/Documents/GitHub/StrigaWGS/')
setwd('/Users/emilywork/Documents/GitHub/StrigaWGS/')
getwd()
setwd("/Users/ebellis/Documents/GitHub/StrigaWGS/")
#setwd("/Users/ebellis/Documents/GitHub/StrigaWGS/")
library(tidyverse)
k21 <- read.table("k21.mash.out", header=F)
k21 <- k21 %>% select(1:3)
colnames(k21) <- c("S1","S2","dist")
meta <- read.csv('Striga_GPS.csv', header=T)
meta$Site <- as.factor(str_replace(meta$Site, "2","") %>% str_trim())
meta <- meta %>% filter(SampleID %in% unique(k21$S1))
list5per <- filter(meta, Site != "Kisii" & Site != "HomaBay")$SampleID
list5perkh <- filter(meta, SampleID =="SH130" | "SH134"|"SH138"| "SH139"|"SH146"|"SH124"|"SH117"|"SH113"|"SH111"|"SH104")
meta <- read.csv('Striga_GPS.csv', header=T)
meta$Site <- as.factor(str_replace(meta$Site, "2","") %>% str_trim())
meta <- meta %>% filter(SampleID %in% unique(k21$S1))
list5per <- filter(meta, Site != "Kisii" & Site != "HomaBay")$SampleID
list5perkh <- filter(meta, SampleID =="SH130" | SampleID =="SH134"|SampleID =="SH138"| SampleID =="SH139"|SampleID =="SH146"|SampleID =="SH124"|SampleID =="SH117"|SampleID =="SH113"|SampleID =="SH111"|SampleID =="SH104")
k21 <- as.matrix(k21 %>% pivot_wider(names_from = S2, values_from = dist) %>%
column_to_rownames(var="S1")
)
k21
nrow(list5per)
list5per
list5perkh <- filter(meta, SampleID =="SH130" | SampleID =="SH134"|SampleID =="SH138"| SampleID =="SH139"|SampleID =="SH146"|SampleID =="SH124"|SampleID =="SH117"|SampleID =="SH113"|SampleID =="SH111"|SampleID =="SH104")$SampleID
list5perkh
c(list5per, list5perkh)
#setwd("/Users/ebellis/Documents/GitHub/StrigaWGS/")
library(tidyverse)
k21 <- read.table("k21.mash.out", header=F)
k21 <- k21 %>% select(1:3)
colnames(k21) <- c("S1","S2","dist")
k21 %>% filter(c(list5per, list5perkh))
k21 %>% filter(SampleID %in% c(list5per, list5perkh))
k21 %>% filter(SampleID %in% list5per)
k21[list5per,]
k21[c(list5per,list5perkh,]
k21[c(list5per,list5perkh),]
k21[c(list5per,list5perkh),]
library(tidyverse)
k21 <- k21 %>% select(1:3)
k21 <- read.table("k21.mash.out", header=F)
k21 <- k21 %>% select(1:3)
colnames(k21) <- c("S1","S2","dist")
k21[c(list5per,list5perkh),]
k21[list5per,]
k21[list5perkh,]
list5 <- c(list5per,list5perkh)
list5
k21$SampleID[list5]
k21$SampleID[list5,]
k21$SampleID %in% list5
meta[list5,]
meta[list5,]$Site
meta[list5,]$SampleID
meta <- read.csv('Striga_GPS.csv', header=T)
meta$Site <- as.factor(str_replace(meta$Site, "2","") %>% str_trim())
meta <- meta %>% filter(SampleID %in% unique(k21$S1))
list5per <- filter(meta, Site != "Kisii" & Site != "HomaBay")$SampleID
list5perkh <- filter(meta, SampleID =="SH130" | SampleID =="SH134"|SampleID =="SH138"| SampleID =="SH139"|SampleID =="SH146"|SampleID =="SH124"|SampleID =="SH117"|SampleID =="SH113"|SampleID =="SH111"|SampleID =="SH104")$SampleID
list5per
list5perkh
c(list5per,list5perkh)
meta
meta
knitr::opts_chunk$set(echo = TRUE)
library(phyloseq)
install.packages('phyloseq')
install.packages('devtools') #assuming it is not already installed
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR(admin_password = 'Admin user password')
updateR()
getwd()
pdf(file="FigS1_FAO.pdf", width=7.5, height=9)
wrap_plots(sen_p, mal_p, bf_p, gha_p, ngr_p, nig_p, cam_p, sud_p, eth_p, ken_p)
dev.off()
getwd()
getwd()
install.packages(c("cowplot", "ggdendro"))
library(ggdendro)
library(dplyr)
library(ggplot2)
library(tidyr)
library(cowplot)
getwd()
library(ggdendro)
library(dplyr)
library(ggplot2)
library(tidyr)
library(cowplot)
################  load gps points for experimental studies
meta <- read.csv('../DataFiles/SI.dat.1.30.20.csv')
meta <- subset(meta, emergence != "NA") # 27 localities
colnames(meta)[3] <- "emg"
meta$locality <- factor(meta$locality, levels = c("Bambey", "Maradi", "Mintimbougou","FarakoBa","SinthionMaleme","Samaru","AbuNaama","Kamboinse","Kobo","Yendi","Tamale","WadMedani","Galadima","Bakura","Damaturu","Jibiya","Andre","Kankia","Bida","Gombe","Gumi","Busia","Gwoza","Mokwa","Ngezima","Kazgail","Obeid"))
install.packages("sf")
library(ggdendro)
library(dplyr)
library(ggplot2)
library(tidyr)
library(cowplot)
################  load gps points for experimental studies
meta <- read.csv('../DataFiles/SI.dat.1.30.20.csv')
library(ggdendro)
library(dplyr)
library(ggplot2)
library(tidyr)
library(cowplot)
################  load gps points for experimental studies
meta <- read.csv('../DataFiles/SI.dat.1.30.20.csv')
meta <- subset(meta, emergence != "NA") # 27 localities
colnames(meta)[3] <- "emg"
sqrt(300)
library(lubridate)
library(ggplot2)
library(tidyverse)
rice <- read.csv('rice_remote_sensing - Sheet1.csv', header=T)
rice$Date <- as.Date(rice$Date, "%m-%d-%Y")
rice <- subset(rice, Date != "2019-06-13")
#rice.long <- rice %>% pivot_longer(c(Train_MSE, Val_MSE))
rice.long <- rice %>% pivot_longer(c(Train_MSE, Val_MSE, Test_MSE))
ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name)) + geom_line(size=0.25) + facet_grid(Set~Model) + theme_bw() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) + scale_color_manual(values = c("black","grey70", "grey50"), name="Dataset", labels=c("Test", "Train", "Validation")) + scale_linetype(name="Fold") + ylab("RMSE") + theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.3)
#ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name)) + geom_line(size=0.4) + facet_grid(Set~Model) + theme_minimal() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) + scale_color_manual(values = c("grey70", "black"), name="Dataset", labels=c("Train", "Validation")) + scale_linetype(name="Fold") + ylab("RMSE") + theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.2)
library(lubridate)
library(ggplot2)
library(tidyverse)
rice <- read.csv('rice_remote_sensing - Sheet1.csv', header=T)
rice$Date <- as.Date(rice$Date, "%m-%d-%Y")
rice <- subset(rice, Date != "2019-06-13")
#rice.long <- rice %>% pivot_longer(c(Train_MSE, Val_MSE))
rice.long <- rice %>% pivot_longer(c(Train_MSE, Val_MSE, Test_MSE))
ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name, lty=name)) +
geom_line(size=0.25) + facet_grid(Set~Model) +
theme_bw() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) +
scale_color_manual(values = c("black","grey70", "grey50"), name="Dataset", labels=c("Test", "Train", "Validation")) +
scale_linetype(name="Fold") +
ylab("RMSE") +
theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.3)
#ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name)) + geom_line(size=0.4) + facet_grid(Set~Model) + theme_minimal() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) + scale_color_manual(values = c("grey70", "black"), name="Dataset", labels=c("Train", "Validation")) + scale_linetype(name="Fold") + ylab("RMSE") + theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.2)
ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name, lty=name)) +
geom_line(size=0.25) + facet_grid(Set~Model) +
theme_bw() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) +
scale_color_manual(values = c("black","grey70", "grey50"), name="Dataset", labels=c("Test", "Train", "Validation")) +
scale_linetype(name="Fold") +
ylab("RMSE") +
theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.3)
ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name, lty=name)) +
geom_line(size=0.25) + facet_grid(Set~Model) +
theme_bw() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) +
scale_color_manual(values = c("black","grey70", "grey50"), name="Dataset", labels=c("Test", "Train", "Validation")) +
scale_linetype(name="Dataset") +
ylab("RMSE") +
theme(axis.text.x = element_text(angle = 90, vjust=0.4))
library(lubridate)
library(ggplot2)
library(tidyverse)
rice <- read.csv('rice_remote_sensing - Sheet1.csv', header=T)
rice$Date <- as.Date(rice$Date, "%m-%d-%Y")
rice <- subset(rice, Date != "2019-06-13")
#rice.long <- rice %>% pivot_longer(c(Train_MSE, Val_MSE))
rice.long <- rice %>% pivot_longer(c(Train_MSE, Val_MSE, Test_MSE))
ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name, lty=name)) +
geom_line(size=0.25) + facet_grid(Set~Model) +
theme_bw() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) +
scale_color_manual(values = c("black","grey70", "grey50"), name="Dataset", labels=c("Test", "Train", "Validation")) +
scale_linetype(name="Dataset", labels=c("Test", "Train", "Validation")) +
ylab("RMSE") +
theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.3)
#ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name)) + geom_line(size=0.4) + facet_grid(Set~Model) + theme_minimal() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) + scale_color_manual(values = c("grey70", "black"), name="Dataset", labels=c("Train", "Validation")) + scale_linetype(name="Fold") + ylab("RMSE") + theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.2)
library(lubridate)
library(ggplot2)
library(tidyverse)
rice <- read.csv('rice_remote_sensing - Sheet1.csv', header=T)
rice$Date <- as.Date(rice$Date, "%m-%d-%Y")
rice <- subset(rice, Date != "2019-06-13")
#rice.long <- rice %>% pivot_longer(c(Train_MSE, Val_MSE))
rice.long <- rice %>% pivot_longer(c(Train_MSE, Val_MSE, Test_MSE))
ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name, lty=name)) +
geom_line(size=0.25) + facet_grid(Set~Model) +
theme_bw() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) +
scale_color_manual(values = c("black","grey70", "grey50"), name="Dataset", labels=c("Test", "Train", "Validation")) +
scale_linetype(name="Dataset", labels=c("Test", "Train", "Validation")) +
ylab("RMSE") +
theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.3)
#ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name)) + geom_line(size=0.4) + facet_grid(Set~Model) + theme_minimal() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) + scale_color_manual(values = c("grey70", "black"), name="Dataset", labels=c("Train", "Validation")) + scale_linetype(name="Fold") + ylab("RMSE") + theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.2)
ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name, lty=name)) +
geom_line(size=0.25) + facet_grid(Set~Model) +
theme_bw() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) +
scale_color_manual(values = c("black","grey70", "grey50"), name="Dataset", labels=c("Test", "Train", "Validation")) +
scale_linetype(name="Dataset", labels=c("Test", "Train", "Validation")) +
ylab("RMSE") +
theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.3)
knitr::opts_chunk$set(echo = TRUE, root.dir = '~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
library(reticulate)
use_python('/opt/anaconda2/envs/py36/bin/python')
py_config()
#conda_create("r-reticulate_rice")
use_condaenv("r-reticulate_rice")
#conda_install("r-reticulate_rice", "tensorflow")
library(reticulate)
#use_python('/opt/anaconda2/envs/py36/bin/python')
py_config()
#conda_create("r-reticulate_rice")
use_condaenv("r-reticulate_rice")
#conda_install("r-reticulate_rice", "tensorflow")
#conda_install("r-reticulate_rice", "tensorflow")
conda_list("r-reticulate_rice")
#conda_install("r-reticulate_rice", "tensorflow")
condaenv_list("r-reticulate_rice")
#conda_install("r-reticulate_rice", "tensorflow")
conda_env_list("r-reticulate_rice")
library(reticulate)
#use_python('/opt/anaconda2/envs/py36/bin/python')
py_config()
#conda_create("r-reticulate_rice")
use_condaenv("r-reticulate_rice")
#conda_install("r-reticulate_rice", "tensorflow")
conda_env_list("r-reticulate_rice")
reticulate::py_discover_config("tensorflow")
library(reticulate)
use_condaenv("r-reticulate_rice")
#use_python('/opt/anaconda2/envs/py36/bin/python')
py_config()
#conda_create("r-reticulate_rice")
library(reticulate)
use_condaenv("r-reticulate_rice")
py_config()
#use_python('/opt/anaconda2/envs/py36/bin/python')
#conda_create("r-reticulate_rice")
knitr::opts_chunk$set(echo = TRUE, root.dir = '~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
library(reticulate)
use_condaenv("r-reticulate_rice")
py_config()
#use_python('/opt/anaconda2/envs/py36/bin/python')
#conda_create("r-reticulate_rice")
library(reticulate)
use_python('/opt/anaconda2/envs/py36/bin/python')
use_condaenv("r-reticulate_rice")
reticulate::py_config()
#use_python('/opt/anaconda2/envs/py36/bin/python')
#conda_create("r-reticulate_rice")
library(reticulate)
#use_python('/opt/anaconda2/envs/py36/bin/python')
use_condaenv("r-reticulate_rice")
reticulate::py_config()
#use_python('/opt/anaconda2/envs/py36/bin/python')
#conda_create("r-reticulate_rice")
library(reticulate)
#use_python('/opt/anaconda2/envs/py36/bin/python')
use_condaenv("r-reticulate_rice")
reticulate::py_config()
#use_python('/opt/anaconda2/envs/py36/bin/python')
#conda_create("r-reticulate_rice")
library(reticulate)
use_python('/Users/ebellis/Library/r-miniconda/envs/r-reticulate_rice/bin/python')
use_condaenv("r-reticulate_rice")
reticulate::py_config()
#use_python('/opt/anaconda2/envs/py36/bin/python')
#conda_create("r-reticulate_rice")
install.packages('tensorflow')
library(tensorflow)
library(reticulate)
use_condaenv("r-reticulate_rice", required=T)
library(reticulate)
use_python('/Users/ebellis/Library/r-miniconda/envs/r-reticulate_rice/bin/python')
use_condaenv("r-reticulate_rice", required = T)
library(reticulate)
use_python('/Users/ebellis/Library/r-miniconda/envs/r-reticulate_rice/bin/python', required = T)
#use_python('/Users/ebellis/Library/r-miniconda/envs/r-reticulate_rice/bin/python', required = T)
use_condaenv("r-reticulate_rice", required = T)
repl_python
library(reticulate)
repl_python()
knitr::opts_chunk$set(echo = TRUE, root.dir = '~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
library(reticulate)
#repl_python()
use_python('/Users/ebellis/Library/r-miniconda/envs/r-reticulate_rice/bin/python', required = T)
#use_condaenv("r-reticulate_rice", required = T)
#reticulate::py_config()
#use_python('/opt/anaconda2/envs/py36/bin/python')
#conda_create("r-reticulate_rice")
library(reticulate)
#repl_python()
use_python('/Users/ebellis/Library/r-miniconda/envs/r-reticulate_rice/bin/python', required = T)
use_condaenv("r-reticulate_rice", required = T)
#reticulate::py_config()
#use_python('/opt/anaconda2/envs/py36/bin/python')
#conda_create("r-reticulate_rice")
knitr::opts_chunk$set(echo = TRUE, root.dir = '~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
library(reticulate)
#repl_python()
use_python('/Users/ebellis/Library/r-miniconda/envs/r-reticulate_rice/bin/python', required = T)
use_condaenv("r-reticulate_rice", required = T)
#reticulate::py_config()
#use_python('/opt/anaconda2/envs/py36/bin/python')
#conda_create("r-reticulate_rice")
reticulate::py_config()
repl_python()
