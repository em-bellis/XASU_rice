nrow(subset(gst_all, GST >= 0.5 & pop == "homabay"))/nrow(subset(gst_all, pop == "homabay")) # 0.6% of homa bay kmers
### extract kmers with GST >0.5 for assembly
kisii_kmer_list <- subset(gst_all, pop == "kisii" & GST >= 0.5)$kmer
homabay_kmer_list <- subset(gst_all, pop == "homabay" & GST >= 0.5)$kmer
write.table(kisii_kmer_list, "kisii_kmers_GST5.txt", row.names = F, col.names = F, sep = "\t", quote = F)
write.table(homabay_kmer_list, "homabay_kmers_GST5.txt", row.names = F, col.names = F, sep = "\t", quote = F)
pdf("kmerdist.pdf", width = 3, height = 3)
p
dev.off()
### graph Gst
p <- ggplot(gst_all, aes(x = GST, col = pop)) +
geom_density() +
theme_classic() +
xlab(paste(italic(GST)))
### graph Gst
p <- ggplot(gst_all, aes(x = GST, col = pop)) +
geom_density() +
theme_classic() +
xlab(expression(paste(italic(GST))))
p
### graph Gst
p <- ggplot(gst_all, aes(x = GST, col = pop)) +
geom_density() +
theme_classic() +
xlab(expression(paste(italic(G_ST))))
p
### graph Gst
p <- ggplot(gst_all, aes(x = GST, col = pop)) +
geom_density() +
theme_classic() +
xlab(expression(italic(G_ST)))
p
help("plotmath")
### graph Gst
p <- ggplot(gst_all, aes(x = GST, col = pop)) +
geom_density() +
theme_classic() +
xlab(expression(italic(G[ST])))
p
### graph Gst
p <- ggplot(gst_all, aes(x = GST, col = pop)) +
geom_density() +
theme_classic() +
xlab(expression(italic(G[ST]))) +
theme(legend.title = "Population")
p
### graph Gst
p <- ggplot(gst_all, aes(x = GST, col = pop)) +
geom_density() +
theme_classic() +
xlab(expression(italic(G[ST]))) +
labs(col = "Population")
p
### graph Gst
p <- ggplot(gst_all, aes(x = GST, col = pop)) +
geom_density() +
theme_classic() +
xlab(expression(italic(G[ST]))) +
scale_colour_discrete(name = "Population", labels = c("Homa Bay", "Kisii"))
p
nrow(subset(gst_all, pop == "homabay"))
nrow(subset(gst_all, pop == "kisii"))
nrow(subset(gst_all, GST >= 0.5 & pop == "kisii"))/nrow(subset(gst_all, pop == "kisii"))
nrow(subset(gst_all, GST >= 0.5 & pop == "homabay"))/nrow(subset(gst_all, pop == "homabay"))
## graphing frequency of different immune metrics
immune_data <- read.csv('~/Desktop/Mega_EF.csv', header = T)
head(immune_data)
## filter
library(tidyverse)
immune_data %>% select(Country, BKA, lysis, agglutination, TLC)
clean_df <- immune_data %>% select(Country, BKA, lysis, agglutination, TLC)
clean_df
unique(clean_df$Country)
str_replace_all(clean_df$Country, "Egypt?", "Egypt")
clean_df <- immune_data %>%
select(Country, BKA, lysis, agglutination, TLC) %>% # columns you want
filter(Country != "")
clean_df <- immune_data %>%
select(Country, BKA, lysis, agglutination, TLC) #%>% # columns you want
clean_df
summary(clean_df)
filter(BKA != "")
nrow(clean_df)
clean_df <- immune_data %>%
select(Country, BKA, lysis, agglutination, TLC) %>% # columns you want
filter(BKA != "")
nrow(clean_df)
## checking for NA's, typos, etc
unique(clean_df$Country)
r
clean_df$Country <- str_replace_all(clean_df$Country, "Egypt?", "Egypt")
## checking for NA's, typos, etc
unique(clean_df$Country)
clean_df$Country <- str_replace_all(clean_df$Country, "Egypt?", "Egypt")
## checking for NA's, typos, etc
unique(clean_df$Country)
clean_df$Country <- str_replace_all(clean_df$Country, "Egypt\?", "Egypt")
clean_df$Country <- str_replace_all(clean_df$Country, 'Egypt?', 'Egypt')
clean_df$Country
?str_replace
clean_df$Country <- str_replace_all(clean_df$Country, '?', '')
clean_df$Country <- str_replace_all(clean_df$Country, '-', 'NA')
clean_df$Country
clean_df
clean_df <- immune_data %>%
select(Country, BKA, lysis, agglutination, TLC) %>% # columns you want
filter(BKA != "") # get rid of empty rows
## checking for NA's, typos, etc
unique(clean_df$Country)
clean_df$Country <- str_replace_all(clean_df$Country, '-', '0')
clean_df
clean_df <- immune_data %>%
select(Country, BKA, lysis, agglutination, TLC) %>% # columns you want
filter(BKA != "") # get rid of empty rows
## checking for NA's, typos, etc
unique(clean_df$Country)
clean_df$Country <- str_replace_all(clean_df$Country, '-', '0') # replace NA with 0
clean_df
clean_df <- immune_data %>%
select(Country, BKA, lysis, agglutination, TLC) %>% # columns you want
filter(BKA != "") # get rid of empty rows
?na.omit
clean_df %>% replace(is.na(.), 0)
clean_df %>% group_by(Country) %>% summarise()
?summarise
clean_df %>% group_by(Country) %>% summarise(BKA = count(BKA))
clean_df %>% group_by(Country) %>% summarise(BKA = n(BKA))
clean_df %>% group_by(Country) %>% summarise(BKA_tot = n(BKA))
unique(clean_df$Country)
## checking for NA's, typos, etc
unique(clean_df$Country)
clean_df$Country <- str_replace_all(clean_df$Country, '-', '0') # replace NA with 0
## checking for NA's, typos, etc
unique(clean_df$Country)
clean_df$Country <- str_replace_all(clean_df$Country, '-', 'NA') # replace NA with 0
clean_df$Country <- str_replace_all(clean_df$Country, '', 'NA') # replace NA with 0
clean_df$Country <- str_replace_all(clean_df$Country, "", 'NA') # replace NA with 0
clean_df <- immune_data %>%
select(Country, BKA, lysis, agglutination, TLC) %>% # columns you want
filter(BKA != "") %>%
filter(Country != "")# get rid of empty rows
o
clean_df <- immune_data %>%
select(Country, BKA, lysis, agglutination, TLC) %>% # columns you want
filter(BKA != "") %>%
filter(Country != "")# get rid of empty rows
## checking for NA's, typos, etc
unique(clean_df$Country)
clean_df$Country <- str_replace_all(clean_df$Country, '-', 'NA') # replace NA with 0
## checking for NA's, typos, etc
unique(clean_df$Country)
clean_df <- clean_df %>% replace(is.na(.), 0) # replace NA from rest of df
clean_df %>% group_by(Country) %>% summarise(BKA_tot = n(BKA))
str(clean_df)
summary(clean_df)
clean_df$Country <- as.factor(clean_df$Country)
summary(clean_df)
clean_df %>% group_by(Country) %>% summarise(BKA_tot = n(BKA))
clean_df %>% group_by(Country) %>% summarise(BKA_tot = n())
clean_df
clean_df %>% pivot_longer()
?pivot_longer
clean_df %>% pivot_longer(cols = 2:5)
clean_df %>%
pivot_longer(cols = 2:5) %>%
filter(value != 0)
df_long <- clean_df %>%
pivot_longer(cols = 2:5) %>%
filter(value != 0)
## ready to plot!
ggplot(df_long, aes(x = name, color = Country)) +
geom_bar()
df_long %>% group_by(Country) %>% summarise(agglutination = n())
df_long %>% filter(agglutination == 1) %>% group_by(Country) %>% summarise(agglutination = n())
df_long %>% filter(value == agglutination) %>% group_by(Country) %>% summarise(agglutination = n())
df_long %>% filter(value == "agglutination") %>% group_by(Country) %>% summarise(agglutination = n())
df_long %>% filter(value == "agglutination")
df_long %>% filter(name == "agglutination")
df_long %>% filter(name == "agglutination") %>% summarize(agg = n())
df_long %>% filter(name == "agglutination") %>% group_by(Country) %>% summarize(agg = n())
## ready to plot!
ggplot(df_long, aes(x = name, fill = Country)) +
geom_bar() +
theme_minimal() +
xlab("Test")
## ready to plot!
ggplot(df_long, aes(x = name, fill = Country)) +
geom_bar(position = 'dodge') +
theme_minimal() +
xlab("Test") #+
## ready to plot!
ggplot(df_long, aes(x = name, fill = Country)) +
geom_bar(position = 'dodge') +
theme_bw() +
xlab("Test") #+
## ready to plot!
ggplot(df_long, aes(x = name, fill = Country)) +
geom_bar(position = 'dodge') +
theme_minimal() +
xlab("Test") #+
## ready to plot!
ggplot(df_long, aes(x = name, fill = Country)) +
geom_bar(position = 'dodge') +
theme_classic() +
xlab("Test") #+
head(immune_data)
clean_df <- immune_data %>%
select(Order, Country, BKA, lysis, agglutination, TLC) %>% # columns you want
filter(BKA != "") %>%
filter(Country != "")# get rid of empty rows
head(clean_df)
unique(clean_df$Order)
clean_df <- immune_data %>%
select(Order, Country, BKA, lysis, agglutination, TLC) %>% # columns you want
filter(BKA != "") %>%
filter(Country != "")# get rid of empty rows
## checking for NA's, typos, etc
unique(clean_df$Country)
clean_df$Country <- str_replace_all(clean_df$Country, '-', 'NA') # replace NA with 0
clean_df <- clean_df %>% replace(is.na(.), 0) # replace NA from rest of df
clean_df$Country <- as.factor(clean_df$Country)
df_long <- clean_df %>%
pivot_longer(cols = 2:5) %>%
filter(value != 0)
clean_df
df_long <- clean_df %>%
pivot_longer(cols = 3:6) %>%
filter(value != 0)
## ready to plot!
ggplot(df_long, aes(x = name, fill = Country)) +
geom_bar(position = 'dodge') +
theme_classic() +
xlab("Test") #+
## ready to plot!
ggplot(df_long, aes(x = name, fill = Country)) +
geom_bar(position = 'dodge') +
theme_classic() +
xlab("Test") +
facet_grid(.~Order) #+
## ready to plot!
ggplot(df_long, aes(x = name, fill = Country)) +
geom_bar(position = 'dodge') +
theme_classic() +
xlab("Test") +
facet_grid(Order~.) #+
## ready to plot!
ggplot(df_long, aes(x = name, fill = Country)) +
geom_bar(position = 'dodge') +
theme_classic() +
xlab("Test") +
facet_grid(Order~Country) #+
## ready to plot!
ggplot(df_long, aes(x = name, fill = Country)) +
geom_bar(position = 'dodge') +
theme_classic() +
xlab("Test") +
facet_grid(Order~.) #+
## plotting G2F data
locations <- read.csv('~/Downloads/g2f_2017_field_metadata.csv', header = T)
locations <- read_csv('~/Downloads/g2f_2017_field_metadata.csv', header = T)
## plotting G2F data
library(tidy)
## plotting G2F data
library(tidyverse)
locations <- read_csv('~/Downloads/g2f_2017_field_metadata.csv', header = T)
locations <- read_csv('~/Downloads/g2f_2017_field_metadata.csv')
locations <- read.csv('~/Downloads/g2f_2017_field_metadata.csv')
locations <- read.csv('~/Downloads/g2f_2017_field_metadata2.csv')
locations <- read.csv('~/Downloads/g2f_2017_field_metadata2.csv', header = T)
head(locations)
locations %>% select(Experiment_Code, Treatment, Latitude_of_Field_Corner_.1..lower.left., Longitude_of_Field_Corner_.1..lower.left.)
locations %>% select(Experiment_Code, Treatment, Latitude_of_Field_Corner_.1..lower.left., Longitude_of_Field_Corner_.1..lower.left., Latitude_of_Field_Corner_.3..upper.right., Longitude_of_Field_Corner_.3..upper.right.)
locations <- locations %>% select(Experiment_Code,
Treatment,
Latitude_of_Field_Corner_.1..lower.left.,
Longitude_of_Field_Corner_.1..lower.left.)
head(locations)
library(tmap)
library(tmaptools)
library(usmap)
install.packages(usmap)
install.packages('usmap')
library(usmap)
?usmap
usmap::us_map(regions = "states"))
usmap::us_map(regions = "states")
library(tigris)
install.packages('tigris')
library(tigris)
download.file("http://www2.census.gov/geo/tiger/GENZ2015/shp/cb_2015_us_state_20m.zip", destfile = "states.zip")
unzip("states.zip")
us_geo<-read_shape("cb_2015_us_state_20m.shp", as.sf = TRUE, stringsAsFactors = FALSE)
us_geo <- st_read("cb_2015_us_state_20m.shp", as.sf = TRUE)
## plotting G2F data
library(tidyverse)
library(tmap)
library(tmaptools)
s
us_geo <- st_read("cb_2015_us_state_20m.shp", as.sf = TRUE)
library(sf)
us_geo <- st_read("cb_2015_us_state_20m.shp", as.sf = TRUE)
us_geo <- st_read("cb_2015_us_state_20m.shp")
plot(us_geo)
library(usmap)
plot_usmap(regions = "states") +
labs(title = "U.S. States",
subtitle = "This is a blank map of the United States.") +
theme(panel.background=element_blank())
colnames(locations)[3:4] <- c('Lat','Lon')
locations
library(raster)
SpatialPoint(cbind(locations$Lon, locations$Lat))
pts <- SpatialPoints(cbind(locations$Lon, locations$Lat))
pts <- SpatialPoints(cbind(locations$Lon, locations$Lat), na.omit = T)
locations %>% na.exclude()
locations <- locations %>% na.exclude()
pts <- SpatialPoints(cbind(locations$Lon, locations$Lat))
pts
CRS(us_map)
points(locations, add = T)
points(pts, add = T)
points(pts)
transformed_data <- usmap_transform(pts)
transformed_data <- usmap_transform(locations)
transformed_data <- usmap_transform(cbind.data.frame(locations$Lon, locations$Lat))
plot_usmap(regions = "states") +
labs(title = "U.S. States",
subtitle = "This is a blank map of the United States.") +
geom_point(data = transformed_data,
aes(x = Lon, y = Lat),
color = "red",
size = 3)
transformed_data
plot_usmap(regions = "states") +
labs(title = "U.S. States",
subtitle = "This is a blank map of the United States.") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
locations
plot_usmap(regions = "states") +
labs(title = "Maize Genomes2F",
subtitle = "Field locations 2017") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
plot_usmap(regions = "states") +
labs(title = "Maize Genomes2Fields",
subtitle = "Field Locations 2017") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
plot_usmap(regions = "states") +
labs(title = "Maize Genomes2Fields",
subtitle = "Field locations 2017") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
plot_usmap(regions = "states") +
labs(title = "Maize Genomes2Fields",
subtitle = "Field locations in 2017") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
nrow(read.csv('~/Downloads/g2f_2017_field_metadata2.csv', header = T))
plot_usmap(regions = "states") +
labs(title = "Maize Genomes2Fields",
subtitle = "32 field locations in 2017") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
plot_usmap(regions = "states") +
labs(title = "Maize Genomes2Fields",
subtitle = "32 field locations in 2017") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
plot_usmap(regions = "states") +
labs(title = "Maize Genomes2Fields",
subtitle = "32 field locations in 2017") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
sum(c(0.0016, 0.0118, 0.0373, 0.0379, 0.5085, 0.0994, 0.1605, 0.0949, 0.0482))
library(ape)
citation('ap')
citation('ape')
?geodist
??geodist
library(geodist)
citation('geodist')
library(lme4)
citation('lme4')
citation()
version()
version
test <- tmp
test
mae <- function(observed, predicted) {
mean_error <- mean(abs(observed - predicted))
return(mean_error)
}
source('~/Documents/GitHub/XASU_rice/3_evaluate_model/calcEvalMetrics.R', echo=TRUE)
library(raster)
library(rgdal)
library(sf)
library(stringr)
library(ggplot2)
library(RColorBrewer)
library(xgboost)
setwd('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/get_max_val.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/process_VIs.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/output_labels.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/create_daystack.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/output_images.R')
#path_to <- "/Volumes/ABISSD/"
path_to <- "/Volumes/LaCie/Dr.\ Reba/Humnok/Way_3/2020/07-05-2020/Index\ clips/"
# function to convert yield units
buac_to_Mgha <- function(bushels) {
return(bushels * 46 /  2204.62 * 2.47105)
}
# function to calculate RMSE
rmse <- function(observed, predicted) {
root_mean_square_error <- sqrt(mean((observed - predicted)^2))
return(root_mean_square_error)
}
# function to calculate R^2
r2 <- function(observed, predicted) {
mod <- lm(observed ~ predicted)
return(summary(mod)[8])
}
# function to calculate MBE
mbe <- function(observed, predicted) {
mean_bias <- mean(predicted - observed)
return(mean_bias)
}
mae <- function(observed, predicted) {
mean_error <- mean(abs(observed - predicted))
return(mean_error)
}
1 + 2
## get yield data layer, downsample, mask; base all other layers on this layer
#yld <- raster(paste0(path_to,'Yield.tif')) # utm, 5 cm resolution
yld <- raster('~/Desktop/2020_Way_Yield_Maps/Way_3_N_2020_Yield/Way_2020_Yield1.tif')
yld
plot(yld)
plot(yld)
yld
yld
plot(yld)
plot(yld)
par("mar")
par(mar=c(1,1,1,1))
plot(yld)
## get yield data layer, downsample, mask; base all other layers on this layer
yld2 <- raster(paste0(path_to,'Yield.tif')) # utm, 5 cm resolution
## get yield data layer, downsample, mask; base all other layers on this layer
yld2 <- raster(paste0('/Volumes/ABISSD/','Yield.tif')) # utm, 5 cm resolution
yld <- raster('~/Desktop/2020_Way_Yield_Maps/Way_3_N_2020_Yield/Way_2020_Yield1.tif')
plot(yld2)
yld.5 <- aggregate(yld, 10) # 0.5 x 0.5 m resolution
yld.5
crop_extent <- readOGR(paste0(path_to,"Shapefiles/Way_3_North_Without_Ditch.shp"))
crop_extent <- readOGR(paste0(path_to,"/Shapefiles/Way_3_North_Without_Ditch.shp"))
path_to
crop_extent <- readOGR(paste0(path_to,"../Shapefiles/Way_3_North_Without_Ditch.shp"))
yld.5d <- crop(yld, crop_extent)
yld.5dm <- mask(yld.5d, crop_extent) # 5616 cells; 5235 of these are non-NA
plot(yld.5dm)
channels <- c("CIgr_clip.tif","GNDVI_Clip.tif","NAVI_Clip.tif","NDWI_Clip.tif","RENDVI_Clip.tif","TGI_Clip.tif","Thermal_Clip.tif")
?create_daystack
############################### output project for 1 day based on linear model
daystack <- create_daystack(path_to_raster, ".", channels, yld.5dm) # raster stack for a single day
path_to_raster <- path_to
############################### output project for 1 day based on linear model
daystack <- create_daystack(path_to_raster, ".", channels, yld.5dm) # raster stack for a single day
############################### output project for 1 day based on linear model
daystack <- create_daystack(path_to_raster, ".", channels, yld.5dm) # raster stack for a single day
############################### output project for 1 day based on linear model
daystack <- create_daystack(path_to_raster, "..", channels, yld.5dm) # raster stack for a single day
############################### output project for 1 day based on linear model
daystack <- create_daystack(path_to_raster, "..", channels, yld.5dm) # raster stack for a single day
1
1
1
path_to_raster
get_max_val()
get_max_val(CI_gr)
curr
curr <- raster(paste(path_to_raster,flyday,channel_list[i], sep = "/"))
curr <- raster(paste(path_to_raster,channel_list[i], sep = "/"))
############################### output project for 1 day based on linear model
curr <- raster(paste0(path_to, channels[1]))
head(curr)
curr
curr
yld.5dm
yld2
project(yld.5dm, yld2)
curr
?project
?projectRaster
projectRaster(yld.5dm, curr)
