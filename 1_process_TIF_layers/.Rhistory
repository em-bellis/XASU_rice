test <- crop(yld.dayna, e.test)
train <- crop(yld.dayna, e.train)
val <- crop(yld.dayna, e.val)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
for (m in 1:3) { #m iterating over datasets
mat <- as.matrix(sets[[m]])
path_to_labs <- paste(path_to,"labels/",flydays[j],"/",names(sets)[[m]], sep="")
output_labels(mat, path_to_labs)
}
message(paste0("Done with ", flydays[j]))
}
## what is the distribution of yield values?
hist(yld.m)
## what is the distribution of yield values?
hist(yld.5dm)
quantile(yld.5dm, probs=0.25)
quantile(yld.5dm, probs=0.5)
for (j in 8:10) {
daystack <- create_daystack(path_to_raster, flydays[j], channels, yld.5dm)
# mask so all have same number of NA's and number of images is same
mostnas_idx <- which.max(as.matrix(cellStats(daystack, stat='countNA')))
yld.dayna <- mask(yld.5dm, daystack[[mostnas_idx]])
daystack <- mask(daystack, daystack[[mostnas_idx]])
## split into test, validation, training sets
train <- crop(daystack, e.train)
val <- crop(daystack, e.val)
test <- crop(daystack, e.test)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
## create and save 5x5 pixel images for one day
for (m in 1:3) { #m iterating over datasets
for (i in 1:length(channels)) { #i iterating over channels
mat <- as.matrix(sets[[m]][[i]])
path_to_imgs <- paste(path_to,"images/",flydays[j],"/",names(sets)[[m]], sep="")
dir.create(path_to_imgs, recursive=T)
output_images(mat, path_to_imgs,names(sets[[m]][[i]]))
}
}
## create and save 5x5 pixel labels for one day
test <- crop(yld.dayna, e.test)
train <- crop(yld.dayna, e.train)
val <- crop(yld.dayna, e.val)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
for (m in 1:3) { #m iterating over datasets
mat <- as.matrix(sets[[m]])
path_to_labs <- paste(path_to,"labels/",flydays[j],"/",names(sets)[[m]], sep="")
output_labels(mat, path_to_labs)
}
message(paste0("Done with ", flydays[j]))
}
daystack
plot(daystack)
plot(yld.dayna)
for (j in 11:11) {
daystack <- create_daystack(path_to_raster, flydays[j], channels, yld.5dm)
# mask so all have same number of NA's and number of images is same
mostnas_idx <- which.max(as.matrix(cellStats(daystack, stat='countNA')))
yld.dayna <- mask(yld.5dm, daystack[[mostnas_idx]])
daystack <- mask(daystack, daystack[[mostnas_idx]])
## split into test, validation, training sets
train <- crop(daystack, e.train)
val <- crop(daystack, e.val)
test <- crop(daystack, e.test)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
## create and save 5x5 pixel images for one day
for (m in 1:3) { #m iterating over datasets
for (i in 1:length(channels)) { #i iterating over channels
mat <- as.matrix(sets[[m]][[i]])
path_to_imgs <- paste(path_to,"images/",flydays[j],"/",names(sets)[[m]], sep="")
dir.create(path_to_imgs, recursive=T)
output_images(mat, path_to_imgs,names(sets[[m]][[i]]))
}
}
## create and save 5x5 pixel labels for one day
test <- crop(yld.dayna, e.test)
train <- crop(yld.dayna, e.train)
val <- crop(yld.dayna, e.val)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
for (m in 1:3) { #m iterating over datasets
mat <- as.matrix(sets[[m]])
path_to_labs <- paste(path_to,"labels/",flydays[j],"/",names(sets)[[m]], sep="")
output_labels(mat, path_to_labs)
}
message(paste0("Done with ", flydays[j]))
}
plot(daystack)
plot(test)
plot(train)
e.train <- c(617769.6, 618159.6, 3828596, 3828776)
e.val <- c(617769.6,617964.6,3828776, 3828956)
e.test <- c(3828596, 3828956,3828776, 3828956)
test <- crop(yld.dayna, e.test)
test <- crop(yld, e.test)
e.test
daystack
e.test <- c(617964.6,618159.6,3828776, 3828956)
test <- crop(yld, e.test)
plot(test)
train <- crop(yld.5, e.train)
plot(train)
val <- crop(yld.5, e.val)
plot(val)
yld <- raster(paste0(path_to,'Yield.tif')) # utm, 5 cm resolution
yld.5 <- aggregate(yld, 10) # 0.5 x 0.5 m resolution
crop_extent <- readOGR(paste0(path_to,"04-11-2019/Carr_N_Without_Ditch.shp"))
yld.5d <- crop(yld.5, crop_extent)
yld.5dm <- mask(yld.5d, crop_extent) # 5616 cells; 5235 of these are non-NA
e.train <- c(617769.6, 618159.6, 3828596, 3828776)
e.val <- c(617769.6,617964.6,3828776, 3828956)
e.test <- c(617964.6,618159.6,3828776, 3828956)
flydays <- c("04-11-2019","05-21-2019","06-13-2019","06-29-2019","07-11-2019","08-01-2019", "08-13-2019", "08-21-2019","08-28-2019","09-07-2019","09-13-2019")
channels <- c("CIgreen.tif","GNDVI.tif","NAVI.tif","NDVI.tif","RENDVI.tif","TGI.tif","Thermal.tif")
path_to_raster <- "/Volumes/ABISSD/"
vis.list <- str_replace(channels, '.tif', '')
for (j in 1:2) {
daystack <- create_daystack(path_to_raster, flydays[j], channels, yld.5dm)
# mask so all have same number of NA's and number of images is same
mostnas_idx <- which.max(as.matrix(cellStats(daystack, stat='countNA')))
yld.dayna <- mask(yld.5dm, daystack[[mostnas_idx]])
daystack <- mask(daystack, daystack[[mostnas_idx]])
## split into test, validation, training sets
train <- crop(daystack, e.train)
val <- crop(daystack, e.val)
test <- crop(daystack, e.test)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
## create and save 5x5 pixel images for one day
for (m in 1:3) { #m iterating over datasets
for (i in 1:length(channels)) { #i iterating over channels
mat <- as.matrix(sets[[m]][[i]])
path_to_imgs <- paste(path_to,"images/",flydays[j],"/",names(sets)[[m]], sep="")
dir.create(path_to_imgs, recursive=T)
output_images(mat, path_to_imgs,names(sets[[m]][[i]]))
}
}
## create and save 5x5 pixel labels for one day
test <- crop(yld.dayna, e.test)
train <- crop(yld.dayna, e.train)
val <- crop(yld.dayna, e.val)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
for (m in 1:3) { #m iterating over datasets
mat <- as.matrix(sets[[m]])
path_to_labs <- paste(path_to,"labels/",flydays[j],"/",names(sets)[[m]], sep="")
output_labels(mat, path_to_labs)
}
message(paste0("Done with ", flydays[j]))
}
plot(yld.5dm)
abline(h=617964.6)
abline(h=617964.6, add=T)
plot(yld.5dm)
plot(yld.5dm)
hline(xintercept=617964.6, add=T)
abline(h=617964.6, size=4)
abline(h=617964.6)
line(h=617964.6, add=T)
lines(h=617964.6, add=T)
abline(v=617964.6)
segments(x0=617769.6,x1=617964.6, y0=3828596, y1=3828776)
plot(yld.5dm)
abline(v=617964.6)
segments(x0=617769.6,y0=3828596, x1=617964.6, y1=3828776)
segments(x0=617769.6,y0=3828776, x1=617964.6, y1=3828776)
plot(yld.5dm)
abline(v=617964.6)
segments(x0=617769.6,y0=3828776, x1=617964.6, y1=3828776)
plot(yld.5dm)
abline(v=3828776)
abline(h=3828776)
plot(yld.5dm)
segments(x0=617769.6,y0=3828776, x1=617964.6, y1=3828776)
segments(x0=617769.6,y0=618159.6, x1=617964.6, y1=3828776)
segments(x0=617769.6,y0=3828776, x1=618159.6, y1=3828776)
plot(yld.5dm)
segments(x0=617769.6,y0=3828776, x1=618159.6, y1=3828776)
segments(x0=617769.6,y0=3828776, x1=617769.6, y1=3828956)
segments(x0=617964.6,y0=3828776, x1=617964.6, y1=3828956)
plot(yld.5dm)
segments(x0=617769.6,y0=3828776, x1=618159.6, y1=3828776)
segments(x0=617964.6,y0=3828776, x1=617964.6, y1=3828956)
plot(yld.5dm)
abline(v=3828776)
abline(v=617964.6)
segments(x0=617964.6,y0=3828776, x1=618159.6, y1=3828956)
segments(x0=617964.6,y0=3828776, x1=618159.6, y1=3828776)
plot(yld.5dm)
segments(x0=617964.6,y0=3828776, x1=618159.6, y1=3828776)
abline(v=617964.6)
plot(yld.5dm)
segments(x0=617769.6,y0=3828776, x1=618159.6, y1=3828776)
segments(x0=618159.6,y0=3828776, x1=618159.6, y1=3828596)
segments(x0=617964.6,y0=3828776, x1=617964.6, y1=3828596)
plot(yld.5dm)
segments(x0=617964.6,y0=3828776, x1=617964.6, y1=3828596)
segments(x0=617769.6,y0=3828776, x1=618159.6, y1=3828776)
for (j in 4:7) {
daystack <- create_daystack(path_to_raster, flydays[j], channels, yld.5dm)
# mask so all have same number of NA's and number of images is same
mostnas_idx <- which.max(as.matrix(cellStats(daystack, stat='countNA')))
yld.dayna <- mask(yld.5dm, daystack[[mostnas_idx]])
daystack <- mask(daystack, daystack[[mostnas_idx]])
## split into test, validation, training sets
train <- crop(daystack, e.train)
val <- crop(daystack, e.val)
test <- crop(daystack, e.test)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
## create and save 5x5 pixel images for one day
for (m in 1:3) { #m iterating over datasets
for (i in 1:length(channels)) { #i iterating over channels
mat <- as.matrix(sets[[m]][[i]])
path_to_imgs <- paste(path_to,"images/",flydays[j],"/",names(sets)[[m]], sep="")
dir.create(path_to_imgs, recursive=T)
output_images(mat, path_to_imgs,names(sets[[m]][[i]]))
}
}
## create and save 5x5 pixel labels for one day
test <- crop(yld.dayna, e.test)
train <- crop(yld.dayna, e.train)
val <- crop(yld.dayna, e.val)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
for (m in 1:3) { #m iterating over datasets
mat <- as.matrix(sets[[m]])
path_to_labs <- paste(path_to,"labels/",flydays[j],"/",names(sets)[[m]], sep="")
output_labels(mat, path_to_labs)
}
message(paste0("Done with ", flydays[j]))
}
daystack
curr <- raster(paste(path_to_raster,flydays[4],channel_list[4], sep = "/"))
curr <- raster(paste(path_to_raster,flydays[4],channels[4], sep = "/"))
plot(curr)
curr
curr <- raster(paste(path_to_raster,flydays[3],channels[4], sep = "/"))
curr
curr <- raster(paste(path_to_raster,flydays[2],channels[4], sep = "/"))
curr
plot(curr)
plot(curr, xlim=c(618000, 618040), ylim=c(3828700, 3828740))
curr <- raster(paste(path_to_raster,flydays[5],channels[4], sep = "/"))
curr
curr <- raster(paste(path_to_raster,flydays[6],channels[4], sep = "/"))
curr
curr <- raster(paste(path_to_raster,flydays[7],channels[4], sep = "/"))
curr
curr <- raster(paste(path_to_raster,flydays[8],channels[4], sep = "/"))
curr
plot(curr, xlim=c(618000, 618040), ylim=c(3828700, 3828740))
plot(curr, xlim=c(618000, 618020), ylim=c(3828700, 3828720))
plot(curr, xlim=c(618000, 618010), ylim=c(3828700, 3828710))
curr <- raster(paste(path_to_raster,flydays[2],channels[4], sep = "/"))
plot(curr, xlim=c(618000, 618010), ylim=c(3828700, 3828710))
plot(yld, xlim=c(618000, 618010), ylim=c(3828700, 3828710))
plot(curr, xlim=c(618000, 618010), ylim=c(3828700, 3828710))
plot(curr, xlim=c(618000, 618010), ylim=c(3828700, 3828710))
curr <- raster(paste(path_to_raster,flydays[8],channels[4], sep = "/"))
plot(curr, xlim=c(618000, 618010), ylim=c(3828700, 3828710))
plot(curr)
for (j in 6:9) {
daystack <- create_daystack(path_to_raster, flydays[j], channels, yld.5dm)
# mask so all have same number of NA's and number of images is same
mostnas_idx <- which.max(as.matrix(cellStats(daystack, stat='countNA')))
yld.dayna <- mask(yld.5dm, daystack[[mostnas_idx]])
daystack <- mask(daystack, daystack[[mostnas_idx]])
## split into test, validation, training sets
train <- crop(daystack, e.train)
val <- crop(daystack, e.val)
test <- crop(daystack, e.test)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
## create and save 5x5 pixel images for one day
for (m in 1:3) { #m iterating over datasets
for (i in 1:length(channels)) { #i iterating over channels
mat <- as.matrix(sets[[m]][[i]])
path_to_imgs <- paste(path_to,"images/",flydays[j],"/",names(sets)[[m]], sep="")
dir.create(path_to_imgs, recursive=T)
output_images(mat, path_to_imgs,names(sets[[m]][[i]]))
}
}
## create and save 5x5 pixel labels for one day
test <- crop(yld.dayna, e.test)
train <- crop(yld.dayna, e.train)
val <- crop(yld.dayna, e.val)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
for (m in 1:3) { #m iterating over datasets
mat <- as.matrix(sets[[m]])
path_to_labs <- paste(path_to,"labels/",flydays[j],"/",names(sets)[[m]], sep="")
output_labels(mat, path_to_labs)
}
message(paste0("Done with ", flydays[j]))
}
for (j in 10:11) {
daystack <- create_daystack(path_to_raster, flydays[j], channels, yld.5dm)
# mask so all have same number of NA's and number of images is same
mostnas_idx <- which.max(as.matrix(cellStats(daystack, stat='countNA')))
yld.dayna <- mask(yld.5dm, daystack[[mostnas_idx]])
daystack <- mask(daystack, daystack[[mostnas_idx]])
## split into test, validation, training sets
train <- crop(daystack, e.train)
val <- crop(daystack, e.val)
test <- crop(daystack, e.test)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
## create and save 5x5 pixel images for one day
for (m in 1:3) { #m iterating over datasets
for (i in 1:length(channels)) { #i iterating over channels
mat <- as.matrix(sets[[m]][[i]])
path_to_imgs <- paste(path_to,"images/",flydays[j],"/",names(sets)[[m]], sep="")
dir.create(path_to_imgs, recursive=T)
output_images(mat, path_to_imgs,names(sets[[m]][[i]]))
}
}
## create and save 5x5 pixel labels for one day
test <- crop(yld.dayna, e.test)
train <- crop(yld.dayna, e.train)
val <- crop(yld.dayna, e.val)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
for (m in 1:3) { #m iterating over datasets
mat <- as.matrix(sets[[m]])
path_to_labs <- paste(path_to,"labels/",flydays[j],"/",names(sets)[[m]], sep="")
output_labels(mat, path_to_labs)
}
message(paste0("Done with ", flydays[j]))
}
?getData
## Set C
e.train <- c(617769.6, 617964.6, 3828596, 3828956)
e.val <- c(617964.6,618159.6,3828596, 3828776)
e.test <- c(617964.6,618159.6,3828776, 3828956)
test <- crop(yld.dayna, e.test)
plot(test)
train <- crop(yld.dayna, e.train)
plot(train)
val <- crop(yld.dayna, e.val)
plot(val)
for (j in 1:2) {
daystack <- create_daystack(path_to_raster, flydays[j], channels, yld.5dm)
# mask so all have same number of NA's and number of images is same
mostnas_idx <- which.max(as.matrix(cellStats(daystack, stat='countNA')))
yld.dayna <- mask(yld.5dm, daystack[[mostnas_idx]])
daystack <- mask(daystack, daystack[[mostnas_idx]])
## split into test, validation, training sets
train <- crop(daystack, e.train)
val <- crop(daystack, e.val)
test <- crop(daystack, e.test)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
## create and save 5x5 pixel images for one day
for (m in 1:3) { #m iterating over datasets
for (i in 1:length(channels)) { #i iterating over channels
mat <- as.matrix(sets[[m]][[i]])
path_to_imgs <- paste(path_to,"images/",flydays[j],"/",names(sets)[[m]], sep="")
dir.create(path_to_imgs, recursive=T)
output_images(mat, path_to_imgs,names(sets[[m]][[i]]))
}
}
## create and save 5x5 pixel labels for one day
test <- crop(yld.dayna, e.test)
train <- crop(yld.dayna, e.train)
val <- crop(yld.dayna, e.val)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
for (m in 1:3) { #m iterating over datasets
mat <- as.matrix(sets[[m]])
path_to_labs <- paste(path_to,"labels/",flydays[j],"/",names(sets)[[m]], sep="")
output_labels(mat, path_to_labs)
}
message(paste0("Done with ", flydays[j]))
}
curr
for (j in 4:7) {
daystack <- create_daystack(path_to_raster, flydays[j], channels, yld.5dm)
# mask so all have same number of NA's and number of images is same
mostnas_idx <- which.max(as.matrix(cellStats(daystack, stat='countNA')))
yld.dayna <- mask(yld.5dm, daystack[[mostnas_idx]])
daystack <- mask(daystack, daystack[[mostnas_idx]])
## split into test, validation, training sets
train <- crop(daystack, e.train)
val <- crop(daystack, e.val)
test <- crop(daystack, e.test)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
## create and save 5x5 pixel images for one day
for (m in 1:3) { #m iterating over datasets
for (i in 1:length(channels)) { #i iterating over channels
mat <- as.matrix(sets[[m]][[i]])
path_to_imgs <- paste(path_to,"images/",flydays[j],"/",names(sets)[[m]], sep="")
dir.create(path_to_imgs, recursive=T)
output_images(mat, path_to_imgs,names(sets[[m]][[i]]))
}
}
## create and save 5x5 pixel labels for one day
test <- crop(yld.dayna, e.test)
train <- crop(yld.dayna, e.train)
val <- crop(yld.dayna, e.val)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
for (m in 1:3) { #m iterating over datasets
mat <- as.matrix(sets[[m]])
path_to_labs <- paste(path_to,"labels/",flydays[j],"/",names(sets)[[m]], sep="")
output_labels(mat, path_to_labs)
}
message(paste0("Done with ", flydays[j]))
}
for (j in 7:8) {
daystack <- create_daystack(path_to_raster, flydays[j], channels, yld.5dm)
# mask so all have same number of NA's and number of images is same
mostnas_idx <- which.max(as.matrix(cellStats(daystack, stat='countNA')))
yld.dayna <- mask(yld.5dm, daystack[[mostnas_idx]])
daystack <- mask(daystack, daystack[[mostnas_idx]])
## split into test, validation, training sets
train <- crop(daystack, e.train)
val <- crop(daystack, e.val)
test <- crop(daystack, e.test)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
## create and save 5x5 pixel images for one day
for (m in 1:3) { #m iterating over datasets
for (i in 1:length(channels)) { #i iterating over channels
mat <- as.matrix(sets[[m]][[i]])
path_to_imgs <- paste(path_to,"images/",flydays[j],"/",names(sets)[[m]], sep="")
dir.create(path_to_imgs, recursive=T)
output_images(mat, path_to_imgs,names(sets[[m]][[i]]))
}
}
## create and save 5x5 pixel labels for one day
test <- crop(yld.dayna, e.test)
train <- crop(yld.dayna, e.train)
val <- crop(yld.dayna, e.val)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
for (m in 1:3) { #m iterating over datasets
mat <- as.matrix(sets[[m]])
path_to_labs <- paste(path_to,"labels/",flydays[j],"/",names(sets)[[m]], sep="")
output_labels(mat, path_to_labs)
}
message(paste0("Done with ", flydays[j]))
}
plot(val)
curr
val
val[1,5]
val[1:5,1:5]
plot(val[1:5,1:5])
plot(raster(val[1:5,1:5]))
raster(val[1:5,1:5])
plot(raster(matrix(val[1:5,1:5])))
plot(raster(matrix(val[1:5,1:5]), nrow=3))
plot(raster(matrix(val[1:5,1:5]), nrow=5))
plot(raster(as.matrix(val[1:5,1:5]), nrow=5))
plot(raster(as.matrix(val[1:5,1:5], nrow=5)))
plot(raster(as.matrix(val[1:5,1:5], nrow=5)))
val[1:5,1:5]
val[1:5,1:5])
val[1:5,1:5]
val[1,1]
val[5,1]
matrix(val[1:5,1:5], nrow=5)
matrix(val[1:5,1:5], ncol = 5)
val[5,5]
val[1,5]
seq(1,10)
matrix(seq(1,10), nrow=2)
matrix(seq(1,10), ncol=2)
?matrix
matrix(val[1:5,1:5], nrow = 5, byrow=T)
plot(matrix(val[1:5,1:5], nrow = 5, byrow=T))
plot(raster(matrix(val[1:5,1:5], nrow = 5, byrow=T))
)
for (j in 9:11) {
daystack <- create_daystack(path_to_raster, flydays[j], channels, yld.5dm)
# mask so all have same number of NA's and number of images is same
mostnas_idx <- which.max(as.matrix(cellStats(daystack, stat='countNA')))
yld.dayna <- mask(yld.5dm, daystack[[mostnas_idx]])
daystack <- mask(daystack, daystack[[mostnas_idx]])
## split into test, validation, training sets
train <- crop(daystack, e.train)
val <- crop(daystack, e.val)
test <- crop(daystack, e.test)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
## create and save 5x5 pixel images for one day
for (m in 1:3) { #m iterating over datasets
for (i in 1:length(channels)) { #i iterating over channels
mat <- as.matrix(sets[[m]][[i]])
path_to_imgs <- paste(path_to,"images/",flydays[j],"/",names(sets)[[m]], sep="")
dir.create(path_to_imgs, recursive=T)
output_images(mat, path_to_imgs,names(sets[[m]][[i]]))
}
}
## create and save 5x5 pixel labels for one day
test <- crop(yld.dayna, e.test)
train <- crop(yld.dayna, e.train)
val <- crop(yld.dayna, e.val)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
for (m in 1:3) { #m iterating over datasets
mat <- as.matrix(sets[[m]])
path_to_labs <- paste(path_to,"labels/",flydays[j],"/",names(sets)[[m]], sep="")
output_labels(mat, path_to_labs)
}
message(paste0("Done with ", flydays[j]))
}
warnings()
