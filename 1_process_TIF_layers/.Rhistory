}
rm(list=ls())
memory.limit()
gc()
library(raster)
library(rgdal)
library(sf)
library(stringr)
library(ggplot2)
# use yield layer for projection
yld <- raster('/Volumes/ExtremeSSD/Data/Yield.tif')
crop_extent <- readOGR(paste("/Volumes/ExtremeSSD/Data/Humnoke/Carr_North/04-11-2019/Carr_N_Without_Ditch.shp", sep="/"))
yld.m <- mask(yld, crop_extent)
flydays <- c("04-11-2019","05-21-2019","06-13-2019","06-29-2019","07-11-2019","08-01-2019", "08-13-2019", "08-21-2019","08-28-2019","09-07-2019","09-13-2019")
channels <- c("CIgreen.tif","GNDVI.tif","NAVI.tif","NDVI.tif","RENDVI.tif","TGI.tif","Thermal.tif")
path_to_raster <- "/Volumes/ExtremeSSD/Data/Humnoke/Carr_North/"
# set up a dataframe with the indices
vis.list <- str_replace(channels, '.tif', '')
vis.df <- data.frame(Day=flydays, Stage=c("fallow","VEG","VEG","VEG","REP_R0","REP_R2","REP_R4","GF","GF","GF","GF"))
veg_index = rep(0,length(flydays))
minVal <- 0
for (i in 3:length(vis.list)) {
if (i == 1) { # set max interval based on Vegetation Index to discard values outside of range
maxVal <- 18
} else if (i == 6) {
maxVal <- 8}
else {
maxVal <- 1
}
for (j in 1:length(flydays)) {
curr <- raster(paste(path_to_raster,flydays[j],channels[i], sep = "/"))
curr <- calc(curr, fun=function(x){ x[x > maxVal | x < minVal] <- NA; return(x)} )
curr.rp <- projectRaster(curr, yld.m) # some of the layers are not in UTM coordinates
curr.rpm <- mask(curr.rp, yld.m)
veg_index[j] <- cellStats(curr.rpm, stat='mean', na.rm=TRUE)
message(paste0("Done with ", vis.list[i], ", ", flydays[j]))
}
vis.df <- cbind.data.frame(vis.df, veg_index)
names(vis.df)[2+i] <- vis.list[i]
}
names(vis.df)
veg_index
curr.rpm
curr
j
i
vis.df <- cbind.data.frame(vis.df, veg_index)
#names(vis.df)[2+i] <- vis.list[i]
names(vis.df)[i] <- vis.list[i]
vis.df
vis.df
vis.df[,1:3]
vis.df <- vis.df[,1:3]
vis.df
for (i in 4:length(vis.list)) {
if (i == 1) { # set max interval based on Vegetation Index to discard values outside of range
maxVal <- 18
} else if (i == 6) {
maxVal <- 8}
else {
maxVal <- 1
}
for (j in 1:length(flydays)) {
curr <- raster(paste(path_to_raster,flydays[j],channels[i], sep = "/"))
curr <- calc(curr, fun=function(x){ x[x > maxVal | x < minVal] <- NA; return(x)} )
curr.rp <- projectRaster(curr, yld.m) # some of the layers are not in UTM coordinates
curr.rpm <- mask(curr.rp, yld.m)
veg_index[j] <- cellStats(curr.rpm, stat='mean', na.rm=TRUE)
message(paste0("Done with ", vis.list[i], ", ", flydays[j]))
}
vis.df <- cbind.data.frame(vis.df, veg_index)
#names(vis.df)[2+i] <- vis.list[i]
names(vis.df)[i] <- vis.list[i]
}
vis.df
write.table(vis.df, file="avg_VI_2.txt", quote=F, sep="\t", row.names=F)
for (i in 7:length(vis.list)) {
if (i == 1) { # set max interval based on Vegetation Index to discard values outside of range
maxVal <- 18
} else if (i == 6) {
maxVal <- 8}
else {
maxVal <- 1
}
for (j in 1:length(flydays)) {
curr <- raster(paste(path_to_raster,flydays[j],channels[i], sep = "/"))
#curr <- calc(curr, fun=function(x){ x[x > maxVal | x < minVal] <- NA; return(x)} )
curr.rp <- projectRaster(curr, yld.m) # some of the layers are not in UTM coordinates
curr.rpm <- mask(curr.rp, yld.m)
veg_index[j] <- cellStats(curr.rpm, stat='mean', na.rm=TRUE)
message(paste0("Done with ", vis.list[i], ", ", flydays[j]))
}
vis.df <- cbind.data.frame(vis.df, veg_index)
#names(vis.df)[2+i] <- vis.list[i]
names(vis.df)[i] <- vis.list[i]
}
vis.df
write.table(vis.df, file="avg_VI_2.txt", quote=F, sep="\t", row.names=F)
read.table("~/Documents/GitHub/XASU_rice/Figures_for_MS/avg_VI_3.txt", header=T)
all.df <- read.table("~/Documents/GitHub/XASU_rice/Figures_for_MS/avg_VI_3.txt", header=T)
# plot, 1 col = 85 mm
all.df$Day <- mdy(all.df$Day)
library(lubridate)
library(ggplot2)
library(tidyr)
library(stringr)
# plot, 1 col = 85 mm
all.df$Day <- mdy(all.df$Day)
df.long <- pivot_longer(all.df, cols=Mean:Upper)
p.all <- ggplot(df.long, aes(x=Day, y=value, lty=name, group=name)) +
geom_line() + theme_classic() + facet_grid(Channel~., scales="free") +
labs(lty="Veg. Index", col="Veg. Index") +
scale_linetype_manual(values=c(2,1,3)) +
theme(axis.text.x = element_text(angle = 90, vjust=0.5))
p.all
pdf("Figure1_VIs.pdf", width=3.35, height=6)
p.all
dev.off()
p.all <- ggplot(df.long, aes(x=Day, y=value, lty=name, group=name)) +
geom_line() + theme_classic() + facet_grid(Channel~., scales="free") +
labs(lty="Yield Group", col="Yield Group") +
scale_linetype_manual(values=c(2,1,3)) +
theme(axis.text.x = element_text(angle = 90, vjust=0.5))
pdf("Figure1_VIs.pdf", width=3.35, height=6)
p.all
dev.off()
p.all <- ggplot(df.long, aes(x=Day, y=value, lty=name, group=name)) +
geom_line() + theme_classic() + facet_grid(Channel~., scales="free") +
labs(lty="Yield Group", col="Yield Group") +
scale_linetype_manual(values=c(2,1,3), names=c("Lower 10%","All","Upper 10%")) +
theme(axis.text.x = element_text(angle = 90, vjust=0.5))
?scale_linetype_manual
p.all <- ggplot(df.long, aes(x=Day, y=value, lty=name, group=name)) +
geom_line() + theme_classic() + facet_grid(Channel~., scales="free") +
labs(lty="Yield Group", col="Yield Group") +
scale_linetype_manual(values=c(2,1,3), labels=c("Lower 10%","All","Upper 10%")) +
theme(axis.text.x = element_text(angle = 90, vjust=0.5))
pdf("Figure1_VIs.pdf", width=3.35, height=6)
p.all
dev.off()
lower_10
yld <- raster('/Volumes/ABISSD/Yield.tif')
yld.5 <- aggregate(yld, 10) # 0.5 x 0.5 m resolution
crop_extent <- readOGR(paste("/Volumes/ABISSD/04-11-2019/Carr_N_Without_Ditch.shp", sep="/"))
yld.m <- mask(yld.5, crop_extent)
crop_extent <- readOGR(paste("/Volumes/ABISSD/04-11-2019/Carr_N_Without_Ditch.shp", sep="/"))
library(raster)
library(rgdal)
library(sf)
library(stringr)
library(ggplot2)
library(tidyr)
library(lubridate)
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/get_max_val.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/process_VIs.R')
# # use yield layer for projection
yld <- raster('/Volumes/ABISSD/Yield.tif')
yld.5 <- aggregate(yld, 10) # 0.5 x 0.5 m resolution
crop_extent <- readOGR(paste("/Volumes/ABISSD/04-11-2019/Carr_N_Without_Ditch.shp", sep="/"))
yld.m <- mask(yld.5, crop_extent)
## what is the distribution of yield values?
hist(yld.m)
quantile(yld.m, probs = c(0.10, 0.9)) # 154.6; 194.5
## create a mask for the lower 10%
lower_10 <- raster::calc(yld.5dm, fun=function(x){ x[x > 154.6] <- NA; return(x)} )
upper_10 <- raster::calc(yld.5dm, fun=function(x){ x[x < 194.5] <- NA; return(x)} )
## create a mask for the lower 10%
lower_10 <- raster::calc(yld.5m, fun=function(x){ x[x > 154.6] <- NA; return(x)} )
## create a mask for the lower 10%
lower_10 <- raster::calc(yld.m, fun=function(x){ x[x > 154.6] <- NA; return(x)} )
upper_10 <- raster::calc(yld.m, fun=function(x){ x[x < 194.5] <- NA; return(x)} )
plot(lower_10)
plot(upper_10)
upper_10
plot(lower_10)
(lower_10)
freq(lower_10, value=NA)
freq(upper_10, value=NA)
freq(yld.m, value=NA)
yld.m
559977 - freq(yld.m, value=NA)
559977 - freq(upper_10, value=NA)
559977 - freq(lower_10, value=NA)
enm <- raster("/Users/ebellis/Desktop/Projects/StigaxSorghum/ENMs/all.CLY250.tif")
plot(enm)
?extent
extent(-5,5,34,42)
e <- extent(-5,5,34,42)
ls
enm_kenya <- crop(enm, e)
plot(enm_kenya)
enm_kenya
enm
?crop
e
e <- extent(33,45,-6,6)
enm_kenya <- crop(enm, e)
plot(enm_kenya)
writeRaster(enm_kenya, "Sther_ENM.tif")
?writeRaster
writeRaster(enm_kenya, "Sther_ENM.tif", format="GTiff")
writeRaster(enm_kenya, "Sther_ENM.tif", format="GTiff", overwrite=T)
writeRaster(enm_kenya, "~/Documents/GitHub/PEER_workshop/4_R_Spatial_Data/Sther_ENM.tif", format="GTiff", overwrite=T)
library(tmap)
library(tmaptools)
Kenya1<-getData("GADM", country="KE", level=1)
Kenya<-getData("GADM", country="KE", level=0)
Kenya1_UTM<-spTransform(Kenya1, CRS("+init=EPSG:32737"))
Kenya0_UTM<-spTransform(Kenya, CRS("+init=EPSG:32737"))
Kenya1_UTM
Kenya1
Kenya1_UTM@data$NAME_1
Kenya1_UTM[Kenya1_UTM@data$NAME_1 == "Busia",]
counties <-Kenya1_UTM[Kenya1_UTM@data$NAME_1 == "Busia"| Kenya1_UTM@data$NAME_1 == "Kisumu",]
counties <-Kenya1_UTM[Kenya1_UTM@data$NAME_1 == "Busia"|| Kenya1_UTM@data$NAME_1 == "Kisumu",]
Kenya1_UTM[Kenya1_UTM@data$NAME_1 == "Busia",]
counties
counties <-Kenya1_UTM[Kenya1_UTM@data$NAME_1 == "Busia"| Kenya1_UTM@data$NAME_1 == "Kisumu",]
counties
counties_sf <- as(counties, Class = "sf")
kenya_sf <- as(Kenya0_UTM, Class="sf")
kenya_smooth <- simplify_shape(kenya_sf, 0.01)
install.packages('rmapshaper')
tm_shape(kenya_smooth) +
tm_polygons()
kenya_smooth <- simplify_shape(kenya_sf, 0.01)
tm_shape(kenya_smooth) +
tm_polygons()
tm_shape(kenya_smooth) +
tm_polygons() +
tm_shape(counties) +
tm_polygons(col="tomato4")
tm_shape(kenya_smooth) +
tm_polygons() +
tm_shape(counties) +
tm_polygons(col="tomato4")
enm <- raster('/Users/ebellis/Documents/GitHub/PEER_workshop/4_R_Spatial_Data/Sther_ENM.tif')
enm
plot(enm)
crop(enm, kenya_smooth)
mask(enm, kenya_smooth)
?mask
mask(enm, kenya_smooth)
enm
kenya
enm
kenya_smooth
?project
project(enm, kenya_smooth)
raster::project(enm, kenya_smooth)
project(enm, Kenya1)
raster::project(enm, Kenya1)
rgdal::project(enm, Kenya1)
spTransform(enm, CRS("+init=EPSG:32737"))
?spTransform
rgdal::project(enm, crs="utm")
projectRaster(enm, Kenya1)
projectRaster(enm, kenya_smooth)
projectRaster(enm, kenya_sf)
?projectRaster
projectRaster(enm)
kenya_smooth
projectRaster(enm, crs="+init=EPSG:32737 +proj=utm +zone=37 +south +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0")
projectRaster(enm, Kenya1)
projectRaster(enm, Kenya1_UTM)
projectRaster(enm, crs="+init=EPSG:32737 +proj=utm +zone=37 +south +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0")
enm_utm <- projectRaster(enm, crs="+init=EPSG:32737 +proj=utm +zone=37 +south +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0")
crop(enm_utm, kenya_smooth)
enm_kenya <- crop(enm_utm, kenya_smooth)
plot(enm)
enm_kenya <- mask(enm_utm, kenya_smooth)
plot(enm)
enm_kenya <- crop(enm_utm, kenya_smooth)
plot(enm_kenya)
enm_kenya <- mask(enm_utm, kenya_smooth)
plot(enm_kenya)
plot(enm_kenya, col=viridis())
install.packages("viridis")
plot(enm_kenya, col=viridis())
library(viridis)
plot(enm_kenya, col=viridis())
plot(enm_kenya, col=viridis(10))
plot(enm_kenya, col=viridis(10), alpha=0.5)
plot(enm_kenya, col=viridis(10), alpha=0.5)
tm_shape(enm_kenya) +
tm_raster() +
tm_shape(kenya_smooth) +
tm_borders()
tm_shape(enm_kenya) +
tm_raster() +
tm_shape(kenya_smooth) +
tm_borders() +
tm_layout(legend.outside=T)
tm_shape(enm_kenya) +
tm_raster() +
tm_shape(kenya_smooth) +
tm_borders() +
tm_layout(legend.outside=T) +
tm_scale_bar(width=0.2)
tm_shape(enm_kenya) +
tm_raster() +
tm_shape(kenya_smooth) +
tm_borders() +
tm_layout(legend.outside=T) +
tm_scale_bar(width=0.1)
tm_shape(enm_kenya) +
tm_raster() +
tm_shape(kenya_smooth) +
tm_borders() +
tm_layout(legend.outside=T) +
tm_scale_bar(width=0.07)
tm_shape(enm_kenya) +
tm_raster() +
tm_shape(kenya_smooth) +
tm_borders() +
tm_layout(legend.outside=T) +
tm_scale_bar(width=0.1)
tm_shape(enm_kenya) +
tm_raster() +
tm_shape(kenya_smooth) +
tm_borders() +
tm_layout(legend.outside=T) +
tm_scale_bar(width=0.05)
tm_shape(enm_kenya) +
tm_raster() +
tm_shape(kenya_smooth) +
tm_borders() +
tm_layout(legend.outside=T) +
tm_scale_bar(width=0.1)
sqrt(155)
sqrt(155)/176
1/32
tmp <- read.table('~/Desktop/Projects/StigaxSorghum/KenyaWGS/taxon_filter/summary.txt', header=F)
})
tmp <- read.table('~/Desktop/Projects/StigaxSorghum/KenyaWGS/taxon_filter/summary.txt', header=F)
head(tmp)
library(ggplot2)
hist(tmp$V2)
hist(tmp$V2*tmp$V3/100)
library(raster)
library(rgdal)
library(sf)
library(stringr)
library(ggplot2)
setwd('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/get_max_val.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/process_VIs.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/output_labels.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/create_daystack.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/output_images.R')
path_to <- "/Volumes/ABISSD/"
yld <- raster(paste0(path_to,'Yield.tif')) # utm, 5 cm resolution
yld.5 <- aggregate(yld, 10) # 0.5 x 0.5 m resolution
crop_extent <- readOGR(paste0(path_to,"04-11-2019/Carr_N_Without_Ditch.shp"))
yld.5d <- crop(yld.5, crop_extent)
yld.5dm <- mask(yld.5d, crop_extent)
## Set D
e.val <- c(617964.6,618159.6,3828596, 3828776)
plot(yld.5d)
## Set D
e.val <- c(617964.6,618159.6,3828596, 3828776)
plot(e.val)
tmp <- crop(yld, e.val)
plot(tmp)
e.test <- (c(617769.6,617964.6,3828596, 3828776))
tmp <- crop(yld, e.test)
plot(tmp)
e.train <- c(617769.6, 618159.6, 3828776,3828956)
tmp <- crop(yld, e.train)
plot(e.train)
plot(tmp)
flydays <- c("04-11-2019","05-21-2019","06-13-2019","06-29-2019","07-11-2019","08-01-2019", "08-13-2019", "08-21-2019","08-28-2019","09-07-2019","09-13-2019")
channels <- c("CIgreen.tif","GNDVI.tif","NAVI.tif","NDVI.tif","RENDVI.tif","TGI.tif","Thermal.tif")
path_to_raster <- "/Volumes/ABISSD/"
vis.list <- str_replace(channels, '.tif', '')
for (j in 1:3) {
daystack <- create_daystack(path_to_raster, flydays[j], channels, yld.5dm)
# mask so all have same number of NA's and number of images is same
mostnas_idx <- which.max(as.matrix(cellStats(daystack, stat='countNA')))
yld.dayna <- mask(yld.5dm, daystack[[mostnas_idx]])
daystack <- mask(daystack, daystack[[mostnas_idx]])
## split into test, validation, training sets
train <- crop(daystack, e.train)
val <- crop(daystack, e.val)
test <- crop(daystack, e.test)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
## create and save 5x5 pixel images for one day
for (m in 1:3) { #m iterating over datasets
for (i in 1:length(channels)) { #i iterating over channels
mat <- as.matrix(sets[[m]][[i]])
path_to_imgs <- paste(path_to,"images/",flydays[j],"/",names(sets)[[m]], sep="")
dir.create(path_to_imgs, recursive=T)
output_images(mat, path_to_imgs,names(sets[[m]][[i]]))
}
}
## create and save 5x5 pixel labels for one day
test <- crop(yld.dayna, e.test)
train <- crop(yld.dayna, e.train)
val <- crop(yld.dayna, e.val)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
for (m in 1:3) { #m iterating over datasets
mat <- as.matrix(sets[[m]])
path_to_labs <- paste(path_to,"labels/",flydays[j],"/",names(sets)[[m]], sep="")
output_labels(mat, path_to_labs)
}
message(paste0("Done with ", flydays[j]))
}
warnings()
for (j in 4:7) {
daystack <- create_daystack(path_to_raster, flydays[j], channels, yld.5dm)
# mask so all have same number of NA's and number of images is same
mostnas_idx <- which.max(as.matrix(cellStats(daystack, stat='countNA')))
yld.dayna <- mask(yld.5dm, daystack[[mostnas_idx]])
daystack <- mask(daystack, daystack[[mostnas_idx]])
## split into test, validation, training sets
train <- crop(daystack, e.train)
val <- crop(daystack, e.val)
test <- crop(daystack, e.test)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
## create and save 5x5 pixel images for one day
for (m in 1:3) { #m iterating over datasets
for (i in 1:length(channels)) { #i iterating over channels
mat <- as.matrix(sets[[m]][[i]])
path_to_imgs <- paste(path_to,"images/",flydays[j],"/",names(sets)[[m]], sep="")
dir.create(path_to_imgs, recursive=T)
output_images(mat, path_to_imgs,names(sets[[m]][[i]]))
}
}
## create and save 5x5 pixel labels for one day
test <- crop(yld.dayna, e.test)
train <- crop(yld.dayna, e.train)
val <- crop(yld.dayna, e.val)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
for (m in 1:3) { #m iterating over datasets
mat <- as.matrix(sets[[m]])
path_to_labs <- paste(path_to,"labels/",flydays[j],"/",names(sets)[[m]], sep="")
output_labels(mat, path_to_labs)
}
message(paste0("Done with ", flydays[j]))
}
for (j in 8:11) {
daystack <- create_daystack(path_to_raster, flydays[j], channels, yld.5dm)
# mask so all have same number of NA's and number of images is same
mostnas_idx <- which.max(as.matrix(cellStats(daystack, stat='countNA')))
yld.dayna <- mask(yld.5dm, daystack[[mostnas_idx]])
daystack <- mask(daystack, daystack[[mostnas_idx]])
## split into test, validation, training sets
train <- crop(daystack, e.train)
val <- crop(daystack, e.val)
test <- crop(daystack, e.test)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
## create and save 5x5 pixel images for one day
for (m in 1:3) { #m iterating over datasets
for (i in 1:length(channels)) { #i iterating over channels
mat <- as.matrix(sets[[m]][[i]])
path_to_imgs <- paste(path_to,"images/",flydays[j],"/",names(sets)[[m]], sep="")
dir.create(path_to_imgs, recursive=T)
output_images(mat, path_to_imgs,names(sets[[m]][[i]]))
}
}
## create and save 5x5 pixel labels for one day
test <- crop(yld.dayna, e.test)
train <- crop(yld.dayna, e.train)
val <- crop(yld.dayna, e.val)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
for (m in 1:3) { #m iterating over datasets
mat <- as.matrix(sets[[m]])
path_to_labs <- paste(path_to,"labels/",flydays[j],"/",names(sets)[[m]], sep="")
output_labels(mat, path_to_labs)
}
message(paste0("Done with ", flydays[j]))
}
library(raster)
library(rgdal)
library(sf)
library(stringr)
library(ggplot2)
setwd('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/get_max_val.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/process_VIs.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/output_labels.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/create_daystack.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/output_images.R')
path_to <- "/Volumes/ABISSD/"
## get yield data layer, downsample, mask; base all other layers on this layer
yld <- raster(paste0(path_to,'Yield.tif')) # utm, 5 cm resolution
#yld.5 <- aggregate(yld, 10) # 0.5 x 0.5 m resolution
crop_extent <- readOGR(paste0(path_to,"04-11-2019/Carr_N_Without_Ditch.shp"))
yld.5d <- crop(yld, crop_extent)
yld.5dm <- mask(yld.5d, crop_extent) # 5616 cells; 5235 of these are non-NA
yld.5dm
e.val <- c(617964.6,618159.6,3828596, 3828776)
e.test <- (c(617769.6,617964.6,3828596, 3828776))
e.train <- c(617769.6, 618159.6, 3828776,3828956)
plot yld.5dm
plot(yld.5dm)
ci <- raster("/Volumes/ABISSD/05-21-2019/CIgreen.tif")
plot(ci)
ci.5d <- crop(ci, crop_extent)
plot(ci.5d)
ci <- raster("/Volumes/ABISSD/08-21-2019/CIgreen.tif")
ci.5d <- crop(ci, crop_extent)
plot(ci.5d)
plot(yld.5dm)
plot(yld.5d)
plot(yld)
