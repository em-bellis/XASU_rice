## split into test, validation, training sets
train <- crop(daystack, e.train)
val <- crop(daystack, e.val)
test <- crop(daystack, e.test)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
## create and save 3x3 pixel images
for (m in 1:3) { #m iterating over datasets
for (i in 1:length(channels)) { #i iterating over channels
mat <- as.matrix(sets[[m]][[i]])
dir.create(paste(path_to,"images/",flydays[j],"/",names(sets)[[m]], sep=""), recursive=T)
k <- 1 #k is a unique id for each subimage
#for (r in seq(1,(dim(mat)[1]-4),5)) {
for (r in 1:10) {
# for (c in seq(1,(dim(mat)[1]-4),5)) {
for (c in 1:10) {
subimg <- round(mat[r:(r+4),c:(c+4)],digits=2)
file_id <- paste(names(sets[[m]][[i]]),k,".csv", sep="")
if (is.na(mean(subimg)) == "FALSE") {
write.table(subimg, file=paste(path_to,"images/",flydays[j],"/",names(sets)[[m]],"/",file_id,sep=""), quote=F, sep=",", row.names=F)
}
k <- k+1
}
}
}
}
}
?dir.create
names(sets)[[1]]
for (j in 1:2) {
#for (i in 1:length(channels)) { # downsample, crop, and make raster stack for each day
for (i in 1:length(channels)) {
curr <- raster(paste(path_to_raster,flydays[j],channels[i], sep = "/"))
if (i<7) {
processed_rast <- process_VIs(vis.list[i], curr, yld.m, get_max_val(vis.list[i]),0)
} else if (i==7) {
processed_rast <- process_VIs(vis.list[i], curr, yld.m, 60,-400)
}
# something going on w/Thermal on 6-13-19, seems to be relative to Kelvin?
if (maxValue(processed_rast) < (-200) && i==7) {
warning(paste('Adding 300 to thermal for ', flydays[j]))
processed_rast <- processed_rast + 300 # something going on w/Thermal on 6-13 seem to be relative to Kelvin?
}
if(i == 1){
daystack <- processed_rast
} else {
daystack <- stack(daystack, processed_rast)
}
}
plot(daystack) # stack of channel data for one day
## split into test, validation, training sets
train <- crop(daystack, e.train)
val <- crop(daystack, e.val)
test <- crop(daystack, e.test)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
## create and save 3x3 pixel images for one day
for (m in 1:3) { #m iterating over datasets
for (i in 1:length(channels)) { #i iterating over channels
mat <- as.matrix(sets[[m]][[i]])
dir.create(paste(path_to,"images/",flydays[j],"/",names(sets)[[m]], sep=""), recursive=T)
k <- 1 #k is a unique id for each subimage
#for (r in seq(1,(dim(mat)[1]-4),5)) {
for (r in 1:10) {
# for (c in seq(1,(dim(mat)[1]-4),5)) {
for (c in 1:10) {
subimg <- round(mat[r:(r+4),c:(c+4)],digits=2)
file_id <- paste(names(sets[[m]][[i]]),k,".csv", sep="")
if (is.na(mean(subimg)) == "FALSE") {
write.table(subimg, file=paste(path_to,"images/",flydays[j],"/",names(sets)[[m]],"/",file_id,sep=""), quote=F, sep=",", row.names=F)
}
k <- k+1
}
}
}
}
}
for (j in 1:2) {
#for (i in 1:length(channels)) { # downsample, crop, and make raster stack for each day
for (i in 1:length(channels)) {
curr <- raster(paste(path_to_raster,flydays[j],channels[i], sep = "/"))
if (i<7) {
processed_rast <- process_VIs(vis.list[i], curr, yld.m, get_max_val(vis.list[i]),0)
} else if (i==7) {
processed_rast <- process_VIs(vis.list[i], curr, yld.m, 60,-400)
}
# something going on w/Thermal on 6-13-19, seems to be relative to Kelvin?
if (maxValue(processed_rast) < (-200) && i==7) {
warning(paste('Adding 300 to thermal for ', flydays[j]))
processed_rast <- processed_rast + 300 # something going on w/Thermal on 6-13 seem to be relative to Kelvin?
}
if(i == 1){
daystack <- processed_rast
} else {
daystack <- stack(daystack, processed_rast)
}
}
plot(daystack) # stack of channel data for one day
## split into test, validation, training sets
train <- crop(daystack, e.train)
val <- crop(daystack, e.val)
test <- crop(daystack, e.test)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
## create and save 5x5 pixel images for one day
for (m in 1:3) { #m iterating over datasets
for (i in 1:length(channels)) { #i iterating over channels
mat <- as.matrix(sets[[m]][[i]])
dir.create(paste(path_to,"images/",flydays[j],"/",names(sets)[[m]], sep=""), recursive=T)
k <- 1 #k is a unique id for each subimage
#for (r in seq(1,(dim(mat)[1]-4),5)) {
for (r in seq(1,10,5)) {
# for (c in seq(1,(dim(mat)[1]-4),5)) {
for (c in seq(1,10,5)) {
subimg <- round(mat[r:(r+4),c:(c+4)],digits=2)
file_id <- paste(names(sets[[m]][[i]]),k,".csv", sep="")
if (is.na(mean(subimg)) == "FALSE") {
write.table(subimg, file=paste(path_to,"images/",flydays[j],"/",names(sets)[[m]],"/",file_id,sep=""), quote=F, sep=",", row.names=F)
}
k <- k+1
}
}
}
}
}
yld.5dm
yld.m
daystack
processed_rast
curr
curr$names
names(curr)
?names
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/process_VIs.R')
for (j in 1:2) {
#for (i in 1:length(channels)) { # downsample, crop, and make raster stack for each day
for (i in 1:length(channels)) {
curr <- raster(paste(path_to_raster,flydays[j],channels[i], sep = "/"))
if (i<7) {
processed_rast <- process_VIs(vis.list[i], curr, yld.5dm, get_max_val(vis.list[i]),0)
} else if (i==7) {
processed_rast <- process_VIs(vis.list[i], curr, yld.5dm, 60,-400)
}
# something going on w/Thermal on 6-13-19, seems to be relative to Kelvin?
if (maxValue(processed_rast) < (-200) && i==7) {
warning(paste('Adding 300 to thermal for ', flydays[j]))
processed_rast <- processed_rast + 300 # something going on w/Thermal on 6-13 seem to be relative to Kelvin?
}
if(i == 1){
daystack <- processed_rast
} else {
daystack <- stack(daystack, processed_rast)
}
}
plot(daystack) # stack of channel data for one day
## split into test, validation, training sets
train <- crop(daystack, e.train)
val <- crop(daystack, e.val)
test <- crop(daystack, e.test)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
## create and save 5x5 pixel images for one day
for (m in 1:3) { #m iterating over datasets
for (i in 1:length(channels)) { #i iterating over channels
mat <- as.matrix(sets[[m]][[i]])
dir.create(paste(path_to,"images/",flydays[j],"/",names(sets)[[m]], sep=""), recursive=T)
k <- 1 #k is a unique id for each subimage
#for (r in seq(1,(dim(mat)[1]-4),5)) {
for (r in seq(1,10,5)) {
# for (c in seq(1,(dim(mat)[1]-4),5)) {
for (c in seq(1,10,5)) {
subimg <- round(mat[r:(r+4),c:(c+4)],digits=2)
file_id <- paste(names(sets[[m]][[i]]),k,".csv", sep="")
if (is.na(mean(subimg)) == "FALSE") {
write.table(subimg, file=paste(path_to,"images/",flydays[j],"/",names(sets)[[m]],"/",file_id,sep=""), quote=F, sep=",", row.names=F)
}
k <- k+1
}
}
}
}
}
warnings()
for (m in 1:3) {
mat <- as.matrix(sets[[m]])
i <- 1
for (r in seq(1,(dim(mat)[1]-4),5)) {
for (c in seq(1,(dim(mat)[2]-4),5)) {
avg <- round(mean(mat[r:(r+4),c:(c+4)]), digits=0)
file_id <- paste("yld",i,".csv", sep="")
subimg <- round(mat[r:(r+4),c:(c+4)],digits=0)
if (is.na(avg) == "FALSE") {
write.table(subimg, file=paste(path_to,"labels/",names(sets)[[m]],"/",file_id,sep=""), quote=F, sep=",", row.names=F, col.names = F)
}
i <- i+1
}
}
}
for (m in 1:3) {
mat <- as.matrix(sets[[m]])
i <- 1
for (r in seq(1,(dim(mat)[1]-4),5)) {
for (c in seq(1,(dim(mat)[2]-4),5)) {
avg <- round(mean(mat[r:(r+4),c:(c+4)]), digits=0)
file_id <- paste("yld",i,".csv", sep="")
subimg <- round(mat[r:(r+4),c:(c+4)],digits=0)
if (is.na(avg) == "FALSE") {
write.table(subimg, file=paste(path_to,"labels/",names(sets)[[m]],"/",file_id,sep=""), quote=F, sep=",", row.names=F, col.names = F)
}
i <- i+1
}
}
}
for (m in 1:3) {
mat <- as.matrix(sets[[m]])
i <- 1
for (r in seq(1,(dim(mat)[1]-4),5)) {
for (c in seq(1,(dim(mat)[2]-4),5)) {
avg <- round(mean(mat[r:(r+4),c:(c+4)]), digits=0)
file_id <- paste("yld",i,".csv", sep="")
subimg <- round(mat[r:(r+4),c:(c+4)],digits=0)
if (is.na(avg) == "FALSE") {
write.table(subimg, file=paste(path_to,"labels/",names(sets)[[m]],"/",file_id,sep=""), quote=F, sep=",", row.names=F, col.names = F)
}
i <- i+1
}
}
}
for (m in 1:3) {
mat <- as.matrix(sets[[m]])
i <- 1
for (r in seq(1,(dim(mat)[1]-4),5)) {
for (c in seq(1,(dim(mat)[2]-4),5)) {
avg <- round(mean(mat[r:(r+4),c:(c+4)]), digits=0)
file_id <- paste("yld",i,".csv", sep="")
subimg <- round(mat[r:(r+4),c:(c+4)],digits=0)
if (is.na(avg) == "FALSE") {
write.table(subimg, file=paste(path_to,"labels/",names(sets)[[m]],"/",file_id,sep=""), quote=F, sep=",", row.names=F, col.names = F)
}
i <- i+1
}
}
}
library(raster)
library(rgdal)
library(sf)
library(stringr)
library(ggplot2)
setwd('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/get_max_val.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/process_VIs.R')
path_to <- "/Volumes/ABISSD/"
yld <- raster(paste0(path_to,'Yield.tif')) # utm, 5 cm resolution
yld.5 <- aggregate(yld, 10) # 0.5 x 0.5 m resolution
crop_extent <- readOGR(paste0(path_to,"04-11-2019/Carr_N_Without_Ditch.shp"))
yld.5d <- crop(yld.5, crop_extent)
yld.5dm <- mask(yld.5d, crop_extent) # 5616 cells; 5235 of these are non-NA
## divide into training, testing and validation sets
# Set A
e.train <- (c(617964.6,618159.6, 3828596, 3828956))
train <- crop(yld.5dm, e.train)
e.val <- (c(617769.6,617964.6,3828596, 3828776))
val <- crop(yld.5dm, e.val)
e.test <- (c(617769.6,617964.6,3828776, 3828956))
test <- crop(yld.5dm, e.test)
############################### Output yield 'labels'
# scan yield image and create sub-images of 5x5 pixels
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
for (m in 1:3) {
mat <- as.matrix(sets[[m]])
i <- 1
for (r in seq(1,(dim(mat)[1]-4),5)) {
for (c in seq(1,(dim(mat)[2]-4),5)) {
avg <- round(mean(mat[r:(r+4),c:(c+4)]), digits=0)
file_id <- paste("yld",i,".csv", sep="")
subimg <- round(mat[r:(r+4),c:(c+4)],digits=0)
if (is.na(avg) == "FALSE") {
write.table(subimg, file=paste(path_to,"labels/",names(sets)[[m]],"/",file_id,sep=""), quote=F, sep=",", row.names=F, col.names = F)
}
i <- i+1
}
}
}
for (m in 1:3) {
mat <- as.matrix(sets[[m]])
i <- 1
for (r in seq(1,(dim(mat)[1]-4),5)) {
for (c in seq(1,(dim(mat)[2]-4),5)) {
avg <- round(mean(mat[r:(r+4),c:(c+4)]), digits=0)
file_id <- paste("yld",i,".csv", sep="")
subimg <- round(mat[r:(r+4),c:(c+4)],digits=0)
if (is.na(avg) == "FALSE") {
write.table(subimg, file=paste(path_to,"labels/",names(sets)[[m]],"/",file_id,sep=""), quote=F, sep=",", row.names=F, col.names = F)
}
i <- i+1
}
}
}
flydays <- c("04-11-2019","05-21-2019","06-13-2019","06-29-2019","07-11-2019","08-01-2019", "08-13-2019", "08-21-2019","08-28-2019","09-07-2019","09-13-2019")
channels <- c("CIgreen.tif","GNDVI.tif","NAVI.tif","NDVI.tif","RENDVI.tif","TGI.tif","Thermal.tif")
path_to_raster <- "/Volumes/ABISSD/"
vis.list <- str_replace(channels, '.tif', '')
for (j in 1:length(flydays)) {
for (i in 1:length(channels)) { # downsample, crop, and make raster stack for each day
curr <- raster(paste(path_to_raster,flydays[j],channels[i], sep = "/"))
if (i<7) {
processed_rast <- process_VIs(vis.list[i], curr, yld.5dm, get_max_val(vis.list[i]),0)
} else if (i==7) {
processed_rast <- process_VIs(vis.list[i], curr, yld.5dm, 60,-400)
}
# something going on w/Thermal on 6-13-19, seems to be relative to Kelvin?
if (maxValue(processed_rast) < (-200) && i==7) {
warning(paste('Adding 300 to thermal for ', flydays[j]))
processed_rast <- processed_rast + 300 # something going on w/Thermal on 6-13 seem to be relative to Kelvin?
}
if(i == 1){
daystack <- processed_rast
} else {
daystack <- stack(daystack, processed_rast)
}
}
plot(daystack) # stack of channel data for one day
## split into test, validation, training sets
train <- crop(daystack, e.train)
val <- crop(daystack, e.val)
test <- crop(daystack, e.test)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
## create and save 5x5 pixel images for one day
for (m in 1:3) { #m iterating over datasets
for (i in 1:length(channels)) { #i iterating over channels
mat <- as.matrix(sets[[m]][[i]])
dir.create(paste(path_to,"images/",flydays[j],"/",names(sets)[[m]], sep=""), recursive=T)
k <- 1 #k is a unique id for each subimage
for (r in seq(1,(dim(mat)[1]-4),5)) {
for (c in seq(1,(dim(mat)[1]-4),5)) {
subimg <- round(mat[r:(r+4),c:(c+4)],digits=2)
file_id <- paste(names(sets[[m]][[i]]),k,".csv", sep="")
if (is.na(mean(subimg)) == "FALSE") {
write.table(subimg, file=paste(path_to,"images/",flydays[j],"/",names(sets)[[m]],"/",file_id,sep=""), quote=F, sep=",", row.names=F, col.names=F)
}
k <- k+1
}
}
}
}
}
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/output_labels.R')
library(raster)
library(rgdal)
library(sf)
library(stringr)
library(ggplot2)
setwd('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/get_max_val.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/process_VIs.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/output_labels.R')
path_to <- "/Volumes/ABISSD/"
yld <- raster(paste0(path_to,'Yield.tif')) # utm, 5 cm resolution
yld.5 <- aggregate(yld, 10) # 0.5 x 0.5 m resolution
crop_extent <- readOGR(paste0(path_to,"04-11-2019/Carr_N_Without_Ditch.shp"))
yld.5d <- crop(yld.5, crop_extent)
yld.5dm <- mask(yld.5d, crop_extent) # 5616 cells; 5235 of these are non-NA
e.train <- (c(617964.6,618159.6, 3828596, 3828956))
train <- crop(yld.5dm, e.train)
e.val <- (c(617769.6,617964.6,3828596, 3828776))
val <- crop(yld.5dm, e.val)
e.test <- (c(617769.6,617964.6,3828776, 3828956))
test <- crop(yld.5dm, e.test)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
for (m in 1:3) {
mat <- as.matrix(sets[[m]])
output_labels(mat, path_to, names(sets)[[m]])
}
all.df
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/get_max_val.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/process_VIs.R')
lower_10 <- raster::calc(yld.m, fun=function(x){ x[x > 154.6] <- NA; return(x)} )
upper_10 <- raster::calc(yld.m, fun=function(x){ x[x < 194.5] <- NA; return(x)} )
all.df
flydays <- c("04-11-2019","05-21-2019","06-13-2019","06-29-2019","07-11-2019","08-01-2019", "08-13-2019", "08-21-2019","08-28-2019","09-07-2019","09-13-2019")
channels <- c("CIgreen.tif","GNDVI.tif","NAVI.tif","NDVI.tif","RENDVI.tif","TGI.tif","Thermal.tif")
path_to_raster <- "/Volumes/ABISSD/"
# set up a dataframe with the indices
vis.list <- str_replace(channels, '.tif', '')
vis.df <- data.frame(Day=flydays, Stage=c("fallow","VEG","VEG","VEG","REP_R0","REP_R2","REP_R4","GF","GF","GF","GF"),Channel=NA, Mean=NA, Lower=NA, Upper=NA)
vi_mean = rep(0,length(flydays))
vi_low = rep(0,length(flydays))
vi_high = rep(0,length(flydays))
yld.m
for (i in 7:length(vis.list)) {
for (j in 1:length(flydays)) {
curr <- raster(paste(path_to_raster,flydays[j],channels[i], sep = "/"))
if (i<7) #
{ processed_rast <- process_VIs(vis.list[i], curr, yld.m, get_max_val(vis.list[i]))}
else if (i==7)
{ processed_rast <- process_VIs(vis.list[i], curr, yld.m, 60)}
vis.df$Channel[j] <- vis.list[i]
vis.df$Mean[j] <- cellStats(processed_rast, stat='mean', na.rm=TRUE)
rast_low <- mask(processed_rast, lower_10)
vis.df$Lower[j] <-  cellStats(rast_low, stat='mean', na.rm=TRUE)
rast_hi <- mask(processed_rast, upper_10)
vis.df$Upper[j] <-  cellStats(rast_hi, stat='mean', na.rm=TRUE)
message(paste0("Done with ", vis.list[i], ", ", flydays[j]))
}
if(i==1) {
all.df <- vis.df
} else {
all.df <- rbind.data.frame(all.df, vis.df)
}
vis.df <- data.frame(Day=flydays, Stage=c("fallow","VEG","VEG","VEG","REP_R0","REP_R2","REP_R4","GF","GF","GF","GF"),Channel=NA, Mean=NA, Lower=NA, Upper=NA)
}
for (i in 7:length(vis.list)) {
for (j in 1:length(flydays)) {
curr <- raster(paste(path_to_raster,flydays[j],channels[i], sep = "/"))
if (i<7) #
{ processed_rast <- process_VIs(vis.list[i], curr, yld.m, get_max_val(vis.list[i]),0)}
else if (i==7)
{ processed_rast <- process_VIs(vis.list[i], curr, yld.m, 60,-400)}
vis.df$Channel[j] <- vis.list[i]
vis.df$Mean[j] <- cellStats(processed_rast, stat='mean', na.rm=TRUE)
rast_low <- mask(processed_rast, lower_10)
vis.df$Lower[j] <-  cellStats(rast_low, stat='mean', na.rm=TRUE)
rast_hi <- mask(processed_rast, upper_10)
vis.df$Upper[j] <-  cellStats(rast_hi, stat='mean', na.rm=TRUE)
message(paste0("Done with ", vis.list[i], ", ", flydays[j]))
}
if(i==1) {
all.df <- vis.df
} else {
all.df <- rbind.data.frame(all.df, vis.df)
}
vis.df <- data.frame(Day=flydays, Stage=c("fallow","VEG","VEG","VEG","REP_R0","REP_R2","REP_R4","GF","GF","GF","GF"),Channel=NA, Mean=NA, Lower=NA, Upper=NA)
}
all.df
i = 7
j = 3
curr <- raster(paste(path_to_raster,flydays[j],channels[i], sep = "/"))
curr
?source
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/create_daystack.R')
for (j in 1:1) {
create_daystack(path_to_raster, flydays[j], channels, yld.5dm)
}
j = 1
daystack <- create_daystack(path_to_raster, flydays[j], channels, yld.5dm)
daystack
plot(daystack)
gc()
rm(list = ls())
daystack_tmp <- create_daystack(path_to_raster, flydays[j], channels, yld.5dm)
library(raster)
library(rgdal)
library(sf)
library(stringr)
library(ggplot2)
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/get_max_val.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/process_VIs.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/output_labels.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/create_daystack.R')
path_to <- "/Volumes/ABISSD/"
## get yield data layer, downsample, mask; base all other layers on this layer
yld <- raster(paste0(path_to,'Yield.tif')) # utm, 5 cm resolution
yld.5 <- aggregate(yld, 10) # 0.5 x 0.5 m resolution
crop_extent <- readOGR(paste0(path_to,"04-11-2019/Carr_N_Without_Ditch.shp"))
yld.5d <- crop(yld.5, crop_extent)
yld.5dm <- mask(yld.5d, crop_extent) # 5616 cells; 5235 of these are non-NA
e.train <- (c(617964.6,618159.6, 3828596, 3828956))
train <- crop(yld.5dm, e.train)
e.val <- (c(617769.6,617964.6,3828596, 3828776))
val <- crop(yld.5dm, e.val)
e.test <- (c(617769.6,617964.6,3828776, 3828956))
test <- crop(yld.5dm, e.test)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
flydays <- c("04-11-2019","05-21-2019","06-13-2019","06-29-2019","07-11-2019","08-01-2019", "08-13-2019", "08-21-2019","08-28-2019","09-07-2019","09-13-2019")
channels <- c("CIgreen.tif","GNDVI.tif","NAVI.tif","NDVI.tif","RENDVI.tif","TGI.tif","Thermal.tif")
path_to_raster <- "/Volumes/ABISSD/"
vis.list <- str_replace(channels, '.tif', '')
daystack_tmp <- create_daystack(path_to_raster, flydays[j], channels, yld.5dm)
j = 1
daystack_tmp <- create_daystack(path_to_raster, flydays[j], channels, yld.5dm)
plot(daystack_tmp)
names(sets[[m]][[i]])
names(sets[[1]][[1]])
train <- crop(daystack, e.train)
val <- crop(daystack, e.val)
test <- crop(daystack, e.test)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
names(sets[[1]][[1]])
daystack <- daystack_tmp
train <- crop(daystack, e.train)
val <- crop(daystack, e.val)
test <- crop(daystack, e.test)
sets <- c(test, train, val)
names(sets) <- c("test","train","val")
names(sets[[1]][[1]])
names(sets[[1]])
names(sets)[[1]]
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/output_images.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/output_images.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/output_labels.R')
m = 1
j = 1
i = 1
dir.create(paste(path_to,"images/",flydays[j],"/",names(sets)[[m]], sep=""), recursive=T)
output_images(mat, path_to, names(sets)[[m]], flydays[j],names(sets[[m]][[i]]))
mat <- as.matrix(sets[[m]][[i]])
output_images(mat, path_to, names(sets)[[m]], flydays[j],names(sets[[m]][[i]]))
