return(root_mean_square_error)
}
rmse(test.df$Yield_Mgha, test.df$preds_2d)
head(test.df)
# calculate metrics
# rmse
rmse(test.df$Yield_Mgha, test.df$preds_2d)
rmse(test.df$Yield_Mgha, test.df$preds_xgb)
rmse(test.df$Yield_Mgha, test.df$preds_lin)
rmse(test.df$Yield_Mgha, test.df$preds_null)
lm(test.df$2d ~ test.df$Yield_Mgha)
lm(test.df$preds_2d ~ test.df$Yield_Mgha)
summary(lm(test.df$preds_2d ~ test.df$Yield_Mgha))
summary(lm(test.df$preds_2d ~ test.df$Yield_Mgha))$r2
summary(lm(test.df$preds_2d ~ test.df$Yield_Mgha))$adjustedr2
summary(lm(test.df$preds_2d ~ test.df$Yield_Mgha))[1
]
summary(lm(test.df$preds_2d ~ test.df$Yield_Mgha))[5]
summary(lm(test.df$preds_2d ~ test.df$Yield_Mgha))[6]
summary(lm(test.df$preds_2d ~ test.df$Yield_Mgha))[7]
summary(lm(test.df$preds_2d ~ test.df$Yield_Mgha))[8]
summary(lm(test.df$Yield_Mgha ~ test.df$preds_2d))[8]
r2 <- function(observed, predicted) {
mod <- lm(predicted ~ observed)
return(summary(mod)[8])
}
#r2
r2(test.df$Yield_Mgha, test.df$preds_2d)
r2(test.df$Yield_Mgha, test.df$preds_xgb)
r2(test.df$Yield_Mgha, test.df$preds_lin)
r2(test.df$Yield_Mgha, test.df$preds_null)
ggplot(test.df, aes(x = Yield_Mgha, y = preds_2d)) + geom_point(alpha = 0.5)
ggplot(test.df, aes(x = Yield_Mgha, y = preds_xgb)) + geom_point(alpha = 0.5)
ggplot(test.df, aes(x = Yield_Mgha, y = preds_xgb)) + geom_point(alpha = 0.1)
ggplot(test.df, aes(x = Yield_Mgha, y = preds_null)) + geom_point(alpha = 0.1)
ggplot(test.df, aes(x = Yield_Mgha, y = preds_2d)) + geom_point(alpha = 0.5)
ggplot(test.df, aes(x = Yield_Mgha, y = preds_2d)) + geom_point(alpha = 0.1)
ggplot(test.df, aes(x = Yield_Mgha, y = preds_xgb)) + geom_point(alpha = 0.1)
ggplot(test.df, aes(x = Yield_Mgha, y = preds_lin)) + geom_point(alpha = 0.1)
mbe <- function(observed, predicted) {
mean_bias <- mean(observed - predicted)
return(mean_bias)
}
mbe(test.df$Yield_Mgha, test.df$preds_2d)
mbe(test.df$Yield_Mgha, test.df$preds_xgb)
mbe(test.df$Yield_Mgha, test.df$preds_lin)
mbe(test.df$Yield_Mgha, test.df$preds_null)
mbe <- function(observed, predicted) {
mean_bias <- mean(abs(observed - predicted))
return(mean_bias)
}
mbe(test.df$Yield_Mgha, test.df$preds_2d)
mbe(test.df$Yield_Mgha, test.df$preds_xgb)
mbe(test.df$Yield_Mgha, test.df$preds_lin)
mbe(test.df$Yield_Mgha, test.df$preds_null)
mbe <- function(observed, predicted) {
mean_bias <- mean(predicted - observed)
return(mean_bias)
}
mae <- function(observed, predicted) {
mean_error <- mean(abs(observed - predicted))
return(mean_error)
}
mbe(test.df$Yield_Mgha, test.df$preds_2d)
mbe(test.df$Yield_Mgha, test.df$preds_xgb)
mbe(test.df$Yield_Mgha, test.df$preds_lin)
mbe(test.df$Yield_Mgha, test.df$preds_null)
mae(test.df$Yield_Mgha, test.df$preds_2d)
mae(test.df$Yield_Mgha, test.df$preds_xgb)
mae(test.df$Yield_Mgha, test.df$preds_lin)
mae(test.df$Yield_Mgha, test.df$preds_null)
e.train <- (c(617964.6,618159.6, 3828596, 3828956))
e.val <- (c(617769.6,617964.6,3828596, 3828776))
e.test <- (c(617769.6,617964.6,3828776, 3828956))
flydays <- c("04-11-2019","05-21-2019","06-13-2019","06-29-2019","07-11-2019","08-01-2019", "08-13-2019", "08-21-2019","08-28-2019","09-07-2019","09-13-2019")
channels <- c("CIgreen.tif","GNDVI.tif","NAVI.tif","NDVI.tif","RENDVI.tif","TGI.tif","Thermal.tif")
path_to_raster <- "/Volumes/ABISSD/"
############################### output project for 1 day based on linear model
daystack <- create_daystack(path_to_raster, "08-01-2019", channels, yld.5dm) # raster stack for a single day
preds_cnn <- raster('~/projectCNN_Aug01_SetA.tif')
preds_cnn <- extend(preds_cnn, 20)
preds_cnn <- crop(preds_cnn, extent(daystack_yld))
preds_cnn <- mask(preds_cnn, daystack[[mostnas_idx]])
daystack_yld <- stack(daystack_yld, preds_cnn)
# split into test, validation, training sets
train_yld <- crop(daystack_yld, e.train)
test_yld <- crop(daystack_yld, e.test)
# create a data frame for each set
train.df <- as.data.frame(na.omit(as.matrix(train_yld))) # drop any rows with NA for any vegetation index
test.df <- as.data.frame(na.omit(as.matrix(test_yld)))
test.df$Yield_Mgha <- buac_to_Mgha(test.df$Yield)
# add a column for predictions for each model
mod.lin = lm(Yield ~ CIgreen + GNDVI + NAVI + NDVI + RENDVI + TGI + Thermal, data = train.df)
test.df$preds_lin <- buac_to_Mgha(predict(mod.lin, test.df))
mod.null = mean(train.df$Yield)
test.df$preds_null <- buac_to_Mgha(mod.null)
test.df$preds_2d <- buac_to_Mgha(test.df$projectCNN_Aug01_v2)
## xgboost model (did not save, so retrain)
dtrain <- xgb.DMatrix(data = as.matrix(train.df[,c(1:7)]), label = as.matrix(train.df[,8]))
dtest <- xgb.DMatrix(data = as.matrix(test.df[,c(1:7)]), label = as.matrix(test.df[,8]))
rownames(dtest) <- NULL
bst <- xgboost(data = dtrain, nrounds=200, max.depth=2, verbose=2, eta = 0.2)
test.df$preds_xgb = buac_to_Mgha(predict(bst, dtest))
rmse(test.df$Yield_Mgha, test.df$preds_2d)
rmse(test.df$Yield_Mgha, test.df$preds_xgb)
rmse(test.df$Yield_Mgha, test.df$preds_lin)
rmse(test.df$Yield_Mgha, test.df$preds_null)
r2(test.df$Yield_Mgha, test.df$preds_2d)
r2(test.df$Yield_Mgha, test.df$preds_xgb)
r2(test.df$Yield_Mgha, test.df$preds_lin)
r2(test.df$Yield_Mgha, test.df$preds_null)
mbe(test.df$Yield_Mgha, test.df$preds_2d)
mbe(test.df$Yield_Mgha, test.df$preds_xgb)
mbe(test.df$Yield_Mgha, test.df$preds_lin)
mbe(test.df$Yield_Mgha, test.df$preds_null)
mae(test.df$Yield_Mgha, test.df$preds_2d)
mae(test.df$Yield_Mgha, test.df$preds_xgb)
mae(test.df$Yield_Mgha, test.df$preds_lin)
mae(test.df$Yield_Mgha, test.df$preds_null)
e.train <- c(617769.6, 617964.6, 3828596, 3828956)
e.val <- c(617964.6,618159.6,3828596, 3828776)
e.test <- c(617964.6,618159.6,3828776, 3828956)
preds_cnn <- raster('~/projectCNN_Aug01_SetC.tif')
preds_cnn <- extend(preds_cnn, 20)
preds_cnn <- crop(preds_cnn, extent(daystack_yld))
preds_cnn <- mask(preds_cnn, daystack[[mostnas_idx]])
daystack_yld <- stack(daystack_yld, preds_cnn)
train_yld <- crop(daystack_yld, e.train)
test_yld <- crop(daystack_yld, e.test)
# create a data frame for each set
train.df <- as.data.frame(na.omit(as.matrix(train_yld))) # drop any rows with NA for any vegetation index
test.df <- as.data.frame(na.omit(as.matrix(test_yld)))
test.df$Yield_Mgha <- buac_to_Mgha(test.df$Yield)
mod.lin = lm(Yield ~ CIgreen + GNDVI + NAVI + NDVI + RENDVI + TGI + Thermal, data = train.df)
test.df$preds_lin <- buac_to_Mgha(predict(mod.lin, test.df))
mod.null = mean(train.df$Yield)
test.df$preds_null <- buac_to_Mgha(mod.null)
test.df$preds_2d <- buac_to_Mgha(test.df$projectCNN_Aug01_v2)
dtrain <- xgb.DMatrix(data = as.matrix(train.df[,c(1:7)]), label = as.matrix(train.df[,8]))
dtest <- xgb.DMatrix(data = as.matrix(test.df[,c(1:7)]), label = as.matrix(test.df[,8]))
rownames(dtest) <- NULL
bst <- xgboost(data = dtrain, nrounds=200, max.depth=2, verbose=2, eta = 0.2)
test.df$preds_xgb = buac_to_Mgha(predict(bst, dtest))
rmse(test.df$Yield_Mgha, test.df$preds_2d)
rmse(test.df$Yield_Mgha, test.df$preds_xgb)
rmse(test.df$Yield_Mgha, test.df$preds_lin)
rmse(test.df$Yield_Mgha, test.df$preds_null)
r2(test.df$Yield_Mgha, test.df$preds_2d)
r2(test.df$Yield_Mgha, test.df$preds_xgb)
r2(test.df$Yield_Mgha, test.df$preds_lin)
r2(test.df$Yield_Mgha, test.df$preds_null)
mbe(test.df$Yield_Mgha, test.df$preds_2d)
mbe(test.df$Yield_Mgha, test.df$preds_xgb)
mbe(test.df$Yield_Mgha, test.df$preds_lin)
mbe(test.df$Yield_Mgha, test.df$preds_null)
mae(test.df$Yield_Mgha, test.df$preds_2d)
mae(test.df$Yield_Mgha, test.df$preds_xgb)
mae(test.df$Yield_Mgha, test.df$preds_lin)
mae(test.df$Yield_Mgha, test.df$preds_null)
daystack_yld
test.df$preds_2d <- buac_to_Mgha(test.df$projectCNN_Aug01_SetC)
rmse(test.df$Yield_Mgha, test.df$preds_2d)
rmse(test.df$Yield_Mgha, test.df$preds_xgb)
rmse(test.df$Yield_Mgha, test.df$preds_lin)
rmse(test.df$Yield_Mgha, test.df$preds_null)
# calculate metrics
# rmse
rmse(test.df$Yield_Mgha, test.df$preds_2d)
#r2
r2(test.df$Yield_Mgha, test.df$preds_2d)
#mbe
mbe(test.df$Yield_Mgha, test.df$preds_2d)
#mae
mae(test.df$Yield_Mgha, test.df$preds_2d)
test.df$preds_2d <- buac_to_Mgha(test.df$projectCNN_Aug01_SetA)
# calculate metrics
# rmse
rmse(test.df$Yield_Mgha, test.df$preds_2d)
#r2
r2(test.df$Yield_Mgha, test.df$preds_2d)
#mbe
mbe(test.df$Yield_Mgha, test.df$preds_2d)
#mae
mae(test.df$Yield_Mgha, test.df$preds_2d)
test.df$preds_2d <- buac_to_Mgha(test.df$projectCNN_Aug01_v2)
# calculate metrics
# rmse
rmse(test.df$Yield_Mgha, test.df$preds_2d)
#r2
r2(test.df$Yield_Mgha, test.df$preds_2d)
#mbe
mbe(test.df$Yield_Mgha, test.df$preds_2d)
#mae
mae(test.df$Yield_Mgha, test.df$preds_2d)
test.df$preds_2d <- buac_to_Mgha(test.df$projectCNN_Aug01_SetA)
# calculate metrics
# rmse
rmse(test.df$Yield_Mgha, test.df$preds_2d)
#r2
r2(test.df$Yield_Mgha, test.df$preds_2d)
#mbe
mbe(test.df$Yield_Mgha, test.df$preds_2d)
#mae
mae(test.df$Yield_Mgha, test.df$preds_2d)
e.train <- (c(617964.6,618159.6, 3828596, 3828956))
e.val <- (c(617769.6,617964.6,3828596, 3828776))
e.test <- (c(617769.6,617964.6,3828776, 3828956))
############################### output project for 1 day based on linear model
daystack <- create_daystack(path_to_raster, "08-01-2019", channels, yld.5dm) # raster stack for a single day
# mask so all have same number of NA's and number of images is same
mostnas_idx <- which.max(as.matrix(cellStats(daystack, stat='countNA')))
yld.dayna <- mask(yld.5dm, daystack[[mostnas_idx]])
daystack <- mask(daystack, daystack[[mostnas_idx]])
daystack_yld <- stack(daystack, yld.dayna)
preds_cnn <- raster('~/projectCNN_Aug01_SetA.tif')
preds_cnn <- extend(preds_cnn, 20)
preds_cnn <- crop(preds_cnn, extent(daystack_yld))
preds_cnn <- mask(preds_cnn, daystack[[mostnas_idx]])
daystack_yld <- stack(daystack_yld, preds_cnn)
# split into test, validation, training sets
train_yld <- crop(daystack_yld, e.train)
test_yld <- crop(daystack_yld, e.test)
# create a data frame for each set
train.df <- as.data.frame(na.omit(as.matrix(train_yld))) # drop any rows with NA for any vegetation index
test.df <- as.data.frame(na.omit(as.matrix(test_yld)))
test.df$Yield_Mgha <- buac_to_Mgha(test.df$Yield)
# add a column for predictions for each model
mod.lin = lm(Yield ~ CIgreen + GNDVI + NAVI + NDVI + RENDVI + TGI + Thermal, data = train.df)
test.df$preds_lin <- buac_to_Mgha(predict(mod.lin, test.df))
mod.null = mean(train.df$Yield)
test.df$preds_null <- buac_to_Mgha(mod.null)
test.df$preds_2d <- buac_to_Mgha(test.df$projectCNN_Aug01_SetA)
# calculate metrics
# rmse
rmse(test.df$Yield_Mgha, test.df$preds_2d)
#r2
r2(test.df$Yield_Mgha, test.df$preds_2d)
#mbe
mbe(test.df$Yield_Mgha, test.df$preds_2d)
#mae
mae(test.df$Yield_Mgha, test.df$preds_2d)
r2(test.df$Yield_Mgha, test.df$preds_lin)
mbe(test.df$Yield_Mgha, test.df$preds_lin)
mae(test.df$Yield_Mgha, test.df$preds_lin)
rmse(test.df$Yield_Mgha, test.df$preds_lin)
e.val <- c(617964.6,618159.6,3828596, 3828776)
e.test <- (c(617769.6,617964.6,3828596, 3828776))
e.train <- c(617769.6, 618159.6, 3828776,3828956)
mostnas_idx <- which.max(as.matrix(cellStats(daystack, stat='countNA')))
yld.dayna <- mask(yld.5dm, daystack[[mostnas_idx]])
daystack <- mask(daystack, daystack[[mostnas_idx]])
daystack_yld <- stack(daystack, yld.dayna)
preds_cnn <- raster('~/projectCNN_Aug01_SetD.tif')
preds_cnn <- extend(preds_cnn, 20)
preds_cnn <- crop(preds_cnn, extent(daystack_yld))
preds_cnn <- mask(preds_cnn, daystack[[mostnas_idx]])
daystack_yld <- stack(daystack_yld, preds_cnn)
# split into test, validation, training sets
train_yld <- crop(daystack_yld, e.train)
test_yld <- crop(daystack_yld, e.test)
# create a data frame for each set
train.df <- as.data.frame(na.omit(as.matrix(train_yld))) # drop any rows with NA for any vegetation index
test.df <- as.data.frame(na.omit(as.matrix(test_yld)))
test.df$Yield_Mgha <- buac_to_Mgha(test.df$Yield)
# add a column for predictions for each model
mod.lin = lm(Yield ~ CIgreen + GNDVI + NAVI + NDVI + RENDVI + TGI + Thermal, data = train.df)
test.df$preds_lin <- buac_to_Mgha(predict(mod.lin, test.df))
mod.null = mean(train.df$Yield)
test.df$preds_null <- buac_to_Mgha(mod.null)
test.df$preds_2d <- buac_to_Mgha(test.df$projectCNN_Aug01_SetD)
## xgboost model (did not save, so retrain)
dtrain <- xgb.DMatrix(data = as.matrix(train.df[,c(1:7)]), label = as.matrix(train.df[,8]))
dtest <- xgb.DMatrix(data = as.matrix(test.df[,c(1:7)]), label = as.matrix(test.df[,8]))
rownames(dtest) <- NULL
bst <- xgboost(data = dtrain, nrounds=200, max.depth=2, verbose=2, eta = 0.2)
test.df$preds_xgb = buac_to_Mgha(predict(bst, dtest))
rmse(test.df$Yield_Mgha, test.df$preds_2d)
rmse(test.df$Yield_Mgha, test.df$preds_xgb)
rmse(test.df$Yield_Mgha, test.df$preds_lin)
rmse(test.df$Yield_Mgha, test.df$preds_null)
mbe(test.df$Yield_Mgha, test.df$preds_2d)
mbe(test.df$Yield_Mgha, test.df$preds_xgb)
mbe(test.df$Yield_Mgha, test.df$preds_lin)
mbe(test.df$Yield_Mgha, test.df$preds_null)
mae(test.df$Yield_Mgha, test.df$preds_2d)
mae(test.df$Yield_Mgha, test.df$preds_xgb)
mae(test.df$Yield_Mgha, test.df$preds_lin)
mae(test.df$Yield_Mgha, test.df$preds_null)
r2(test.df$Yield_Mgha, test.df$preds_2d)
r2(test.df$Yield_Mgha, test.df$preds_xgb)
r2(test.df$Yield_Mgha, test.df$preds_lin)
r2(test.df$Yield_Mgha, test.df$preds_null)
Set <- 'A'
## divide into training, testing and validation sets=
## Set A
if (Set == 'A') {
e.train <- (c(617964.6,618159.6, 3828596, 3828956))
e.val <- (c(617769.6,617964.6,3828596, 3828776))
e.test <- (c(617769.6,617964.6,3828776, 3828956))
} else if (Set == "B") {
## Set B
e.train <- c(617769.6, 618159.6, 3828596, 3828776)
e.val <- c(617769.6,617964.6,3828776, 3828956)
e.test <- c(617964.6,618159.6,3828776, 3828956)
} else if (Set == "C") {
## Set C
e.train <- c(617769.6, 617964.6, 3828596, 3828956)
e.val <- c(617964.6,618159.6,3828596, 3828776)
e.test <- c(617964.6,618159.6,3828776, 3828956)
} else if (Set == "D") {
## Set D
e.val <- c(617964.6,618159.6,3828596, 3828776)
e.test <- (c(617769.6,617964.6,3828596, 3828776))
e.train <- c(617769.6, 618159.6, 3828776,3828956)
}
A
e.val
e.train
e.test
Set <- 'B'
if (Set == 'A') {
e.train <- (c(617964.6,618159.6, 3828596, 3828956))
e.val <- (c(617769.6,617964.6,3828596, 3828776))
e.test <- (c(617769.6,617964.6,3828776, 3828956))
} else if (Set == "B") {
## Set B
e.train <- c(617769.6, 618159.6, 3828596, 3828776)
e.val <- c(617769.6,617964.6,3828776, 3828956)
e.test <- c(617964.6,618159.6,3828776, 3828956)
} else if (Set == "C") {
## Set C
e.train <- c(617769.6, 617964.6, 3828596, 3828956)
e.val <- c(617964.6,618159.6,3828596, 3828776)
e.test <- c(617964.6,618159.6,3828776, 3828956)
} else if (Set == "D") {
## Set D
e.val <- c(617964.6,618159.6,3828596, 3828776)
e.test <- (c(617769.6,617964.6,3828596, 3828776))
e.train <- c(617769.6, 618159.6, 3828776,3828956)
}
e.val
paste0('~/projectCNN_Aug01_',Set,'.tif')
paste0('~/projectCNN_Aug01_Set',Set,'.tif')
preds_cnn <- raster(paste0('~/projectCNN_Aug01_Set',Set,'.tif'))
Set <- 'A'
preds_cnn <- raster(paste0('~/projectCNN_Aug01_Set',Set,'.tif'))
preds_cnn <- raster(paste0('~/projectCNN_Aug01_Set',Set,'.tif'))
preds_cnn <- extend(preds_cnn, 20)
preds_cnn <- crop(preds_cnn, extent(daystack_yld))
preds_cnn <- mask(preds_cnn, daystack[[mostnas_idx]])
daystack_yld <- stack(daystack_yld, preds_cnn)
# split into test, validation, training sets
train_yld <- crop(daystack_yld, e.train)
test_yld <- crop(daystack_yld, e.test)
# create a data frame for each set
train.df <- as.data.frame(na.omit(as.matrix(train_yld))) # drop any rows with NA for any vegetation index
head(train.df)
raster
preds_cnn
names(preds_cnn)
names(preds_cnn) <- 'preds_2d'
head(train.df)
preds_cnn <- raster(paste0('~/projectCNN_Aug01_Set',Set,'.tif'))
preds_cnn <- extend(preds_cnn, 20)
preds_cnn <- crop(preds_cnn, extent(daystack_yld))
preds_cnn <- mask(preds_cnn, daystack[[mostnas_idx]])
names(preds_cnn) <- 'preds_2d'
daystack_yld <- stack(daystack_yld, preds_cnn)
names(preds_cnn) <- 'preds_2d'
train_yld <- crop(daystack_yld, e.train)
test_yld <- crop(daystack_yld, e.test)
# create a data frame for each set
train.df <- as.data.frame(na.omit(as.matrix(train_yld))) # drop any rows with NA for any vegetation index
test.df <- as.data.frame(na.omit(as.matrix(test_yld)))
head(train.df)
test.df$preds_2d <- buac_to_Mgha(test.df$preds_2d)
head(test.df)
library(raster)
library(rgdal)
library(sf)
library(stringr)
library(ggplot2)
library(RColorBrewer)
library(xgboost)
setwd('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/get_max_val.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/process_VIs.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/output_labels.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/create_daystack.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/output_images.R')
path_to <- "/Volumes/ABISSD/"
# function to convert yield units
buac_to_Mgha <- function(bushels) {
return(bushels * 46 /  2204.62 * 2.47105)
}
# function to calculate RMSE
rmse <- function(observed, predicted) {
root_mean_square_error <- sqrt(mean((observed - predicted)^2))
return(root_mean_square_error)
}
# function to calculate R^2
r2 <- function(observed, predicted) {
mod <- lm(predicted ~ observed)
return(summary(mod)[8])
}
# function to calculate MBE
mbe <- function(observed, predicted) {
mean_bias <- mean(predicted - observed)
return(mean_bias)
}
mae <- function(observed, predicted) {
mean_error <- mean(abs(observed - predicted))
return(mean_error)
}
## get yield data layer, downsample, mask; base all other layers on this layer
yld <- raster(paste0(path_to,'Yield.tif')) # utm, 5 cm resolution
yld.5 <- aggregate(yld, 10) # 0.5 x 0.5 m resolution
crop_extent <- readOGR(paste0(path_to,"04-11-2019/Carr_N_Without_Ditch.shp"))
yld.5d <- crop(yld.5, crop_extent)
yld.5dm <- mask(yld.5d, crop_extent) # 5616 cells; 5235 of these are non-NA
Set <- 'A'
if (Set == 'A') {
e.train <- (c(617964.6,618159.6, 3828596, 3828956))
e.val <- (c(617769.6,617964.6,3828596, 3828776))
e.test <- (c(617769.6,617964.6,3828776, 3828956))
} else if (Set == "B") {
## Set B
e.train <- c(617769.6, 618159.6, 3828596, 3828776)
e.val <- c(617769.6,617964.6,3828776, 3828956)
e.test <- c(617964.6,618159.6,3828776, 3828956)
} else if (Set == "C") {
## Set C
e.train <- c(617769.6, 617964.6, 3828596, 3828956)
e.val <- c(617964.6,618159.6,3828596, 3828776)
e.test <- c(617964.6,618159.6,3828776, 3828956)
} else if (Set == "D") {
## Set D
e.val <- c(617964.6,618159.6,3828596, 3828776)
e.test <- (c(617769.6,617964.6,3828596, 3828776))
e.train <- c(617769.6, 618159.6, 3828776,3828956)
}
## process all other layers (downsample, crop, mask); make raster stacks for each day; split into test, train, and validation sets; split each of these into 5x5 pixel subimages and then save each image and channel separately as .csv file
flydays <- c("04-11-2019","05-21-2019","06-13-2019","06-29-2019","07-11-2019","08-01-2019", "08-13-2019", "08-21-2019","08-28-2019","09-07-2019","09-13-2019")
channels <- c("CIgreen.tif","GNDVI.tif","NAVI.tif","NDVI.tif","RENDVI.tif","TGI.tif","Thermal.tif")
path_to_raster <- "/Volumes/ABISSD/"
############################### output project for 1 day based on linear model
daystack <- create_daystack(path_to_raster, "08-01-2019", channels, yld.5dm) # raster stack for a single day
# mask so all have same number of NA's and number of images is same
mostnas_idx <- which.max(as.matrix(cellStats(daystack, stat='countNA')))
yld.dayna <- mask(yld.5dm, daystack[[mostnas_idx]])
daystack <- mask(daystack, daystack[[mostnas_idx]])
daystack_yld <- stack(daystack, yld.dayna)
preds_cnn <- raster(paste0('~/projectCNN_Aug01_Set',Set,'.tif'))
preds_cnn <- extend(preds_cnn, 20)
preds_cnn <- crop(preds_cnn, extent(daystack_yld))
preds_cnn <- mask(preds_cnn, daystack[[mostnas_idx]])
names(preds_cnn) <- 'preds_2d'
daystack_yld <- stack(daystack_yld, preds_cnn)
# split into test, validation, training sets
train_yld <- crop(daystack_yld, e.train)
test_yld <- crop(daystack_yld, e.test)
# create a data frame for each set
train.df <- as.data.frame(na.omit(as.matrix(train_yld))) # drop any rows with NA for any vegetation index
test.df <- as.data.frame(na.omit(as.matrix(test_yld)))
test.df$Yield_Mgha <- buac_to_Mgha(test.df$Yield)
# add a column for predictions for each model
mod.lin = lm(Yield ~ CIgreen + GNDVI + NAVI + NDVI + RENDVI + TGI + Thermal, data = train.df)
test.df$preds_lin <- buac_to_Mgha(predict(mod.lin, test.df))
mod.null = mean(train.df$Yield)
test.df$preds_null <- buac_to_Mgha(mod.null)
test.df$preds_2d <- buac_to_Mgha(test.df$preds_2d)
## xgboost model (did not save, so retrain)
dtrain <- xgb.DMatrix(data = as.matrix(train.df[,c(1:7)]), label = as.matrix(train.df[,8]))
dtest <- xgb.DMatrix(data = as.matrix(test.df[,c(1:7)]), label = as.matrix(test.df[,8]))
rownames(dtest) <- NULL
bst <- xgboost(data = dtrain, nrounds=200, max.depth=2, verbose=2, eta = 0.2)
test.df$preds_xgb = buac_to_Mgha(predict(bst, dtest))
# calculate metrics
# rmse
rmse(test.df$Yield_Mgha, test.df$preds_2d)
rmse(test.df$Yield_Mgha, test.df$preds_xgb)
rmse(test.df$Yield_Mgha, test.df$preds_lin)
rmse(test.df$Yield_Mgha, test.df$preds_null)
#r2
r2(test.df$Yield_Mgha, test.df$preds_2d)
r2(test.df$Yield_Mgha, test.df$preds_xgb)
r2(test.df$Yield_Mgha, test.df$preds_lin)
r2(test.df$Yield_Mgha, test.df$preds_null)
#mbe
mbe(test.df$Yield_Mgha, test.df$preds_2d)
mbe(test.df$Yield_Mgha, test.df$preds_xgb)
mbe(test.df$Yield_Mgha, test.df$preds_lin)
mbe(test.df$Yield_Mgha, test.df$preds_null)
#mae
mae(test.df$Yield_Mgha, test.df$preds_2d)
mae(test.df$Yield_Mgha, test.df$preds_xgb)
mae(test.df$Yield_Mgha, test.df$preds_lin)
mae(test.df$Yield_Mgha, test.df$preds_null)
process_daystack <- function(j) {
daystack <- create_daystack(path_to, flydays[j], channels, yld.5dm) # raster stack for a single day
# mask so all have same number of NA's and number of images is same
mostnas_idx <- which.max(as.matrix(cellStats(daystack, stat='countNA')))
yld.dayna <- mask(yld.5dm, daystack[[mostnas_idx]])
daystack <- mask(daystack, daystack[[mostnas_idx]])
return(daystack)
}
flydays[4]
flydays[5]
flydays[6]
flydays[7]
flydays[8]
daystack1
