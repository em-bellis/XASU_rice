tm_layout(legend.outside=T) +
tm_scale_bar(width=0.07)
tm_shape(enm_kenya) +
tm_raster() +
tm_shape(kenya_smooth) +
tm_borders() +
tm_layout(legend.outside=T) +
tm_scale_bar(width=0.1)
tm_shape(enm_kenya) +
tm_raster() +
tm_shape(kenya_smooth) +
tm_borders() +
tm_layout(legend.outside=T) +
tm_scale_bar(width=0.05)
tm_shape(enm_kenya) +
tm_raster() +
tm_shape(kenya_smooth) +
tm_borders() +
tm_layout(legend.outside=T) +
tm_scale_bar(width=0.1)
sqrt(155)
sqrt(155)/176
1/32
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
k31 <- read.table("k31.mash.out", header=F)
k31 <- k31 %>% select(1:3)
library(tidyverse)
k31 <- read.table("k31.mash.out", header=F)
k31 <- k31 %>% select(1:3)
colnames(k31) <- c("S1","S2","dist")
head(k31)
k21 <- read.table("k21.mash.out", header=F)
k21 <- k21 %>% select(1:3)
colnames(k21) <- c("S1","S2","dist")
meta <- read.csv('Striga_GPS.csv', header=T)
head(meta)
meta$Site <- as.factor(str_replace(meta$Site, "2","") %>% str_trim())
head(meta)
nrow(site)
nrow(meta)
meta %>% filter(SampleID %in% unique(k21$S1))
unique(k21$S1)
meta <- read.csv('Striga_GPS.csv', header=T)
meta$Site <- as.factor(str_replace(meta$Site, "2","") %>% str_trim())
meta <- meta %>% filter(SampleID %in% unique(k21$S1))
meta
list5per <- filter(meta, Site != "Kisii" & Site != "HomaBay")$SampleID
unique(k21$S1))
list5per
list5per <- c(list5per, "SH130", "SH134", "SH138", "SH139","SH146","SH124","SH117","SH113","SH111","SH104")
list5per
list5per <- filter(meta, Site != "Kisii" & Site != "HomaBay")$SampleID
list5per
list5per <- c(list5per, "SH130", "SH134", "SH138", "SH139","SH146","SH124","SH117","SH113","SH111","SH104")
list5per
list5per <- filter(meta, Site != "Kisii" & Site != "HomaBay")$SampleID
list5per <- cbind(list5per, "SH130", "SH134", "SH138", "SH139","SH146","SH124","SH117","SH113","SH111","SH104")
list5per
list5per <- filter(meta, Site != "Kisii" & Site != "HomaBay")$SampleID
class(list5per)
list5per <- cbind(list5per, SH130, SH134, SH138, SH139,SH146,SH124,SH117,SH113,SH111,SH104)
list5per <- c("SH130", "SH134", "SH138", "SH139","SH146","SH124","SH117","SH113","SH111","SH104")
list5per
as.factor(list5per)
list5per <- filter(meta, Site != "Kisii" & Site != "HomaBay")$SampleID
list5per <- c(list5per, as.factor("SH130", "SH134", "SH138", "SH139","SH146","SH124","SH117","SH113","SH111","SH104"))
list5per <- filter(meta, Site != "Kisii" & Site != "HomaBay")$SampleID
list5per
list5perkh <- filter(meta, SampleID =="SH130" | "SH134"|"SH138"| "SH139"|"SH146"|"SH124"|"SH117"|"SH113"|"SH111"|"SH104"))
list5perkh <- filter(meta, SampleID =="SH130" | "SH134"|"SH138"| "SH139"|"SH146"|"SH124"|"SH117"|"SH113"|"SH111"|"SH104")
knitr::opts_chunk$set(echo = TRUE)
setwd('/Users/emilywork/Documents/GitHub/StrigaWGS/')
setwd('/Users/emilywork/Documents/GitHub/StrigaWGS/')
getwd()
setwd("/Users/ebellis/Documents/GitHub/StrigaWGS/")
#setwd("/Users/ebellis/Documents/GitHub/StrigaWGS/")
library(tidyverse)
k21 <- read.table("k21.mash.out", header=F)
k21 <- k21 %>% select(1:3)
colnames(k21) <- c("S1","S2","dist")
meta <- read.csv('Striga_GPS.csv', header=T)
meta$Site <- as.factor(str_replace(meta$Site, "2","") %>% str_trim())
meta <- meta %>% filter(SampleID %in% unique(k21$S1))
list5per <- filter(meta, Site != "Kisii" & Site != "HomaBay")$SampleID
list5perkh <- filter(meta, SampleID =="SH130" | "SH134"|"SH138"| "SH139"|"SH146"|"SH124"|"SH117"|"SH113"|"SH111"|"SH104")
meta <- read.csv('Striga_GPS.csv', header=T)
meta$Site <- as.factor(str_replace(meta$Site, "2","") %>% str_trim())
meta <- meta %>% filter(SampleID %in% unique(k21$S1))
list5per <- filter(meta, Site != "Kisii" & Site != "HomaBay")$SampleID
list5perkh <- filter(meta, SampleID =="SH130" | SampleID =="SH134"|SampleID =="SH138"| SampleID =="SH139"|SampleID =="SH146"|SampleID =="SH124"|SampleID =="SH117"|SampleID =="SH113"|SampleID =="SH111"|SampleID =="SH104")
k21 <- as.matrix(k21 %>% pivot_wider(names_from = S2, values_from = dist) %>%
column_to_rownames(var="S1")
)
k21
nrow(list5per)
list5per
list5perkh <- filter(meta, SampleID =="SH130" | SampleID =="SH134"|SampleID =="SH138"| SampleID =="SH139"|SampleID =="SH146"|SampleID =="SH124"|SampleID =="SH117"|SampleID =="SH113"|SampleID =="SH111"|SampleID =="SH104")$SampleID
list5perkh
c(list5per, list5perkh)
#setwd("/Users/ebellis/Documents/GitHub/StrigaWGS/")
library(tidyverse)
k21 <- read.table("k21.mash.out", header=F)
k21 <- k21 %>% select(1:3)
colnames(k21) <- c("S1","S2","dist")
k21 %>% filter(c(list5per, list5perkh))
k21 %>% filter(SampleID %in% c(list5per, list5perkh))
k21 %>% filter(SampleID %in% list5per)
k21[list5per,]
k21[c(list5per,list5perkh,]
k21[c(list5per,list5perkh),]
k21[c(list5per,list5perkh),]
library(tidyverse)
k21 <- k21 %>% select(1:3)
k21 <- read.table("k21.mash.out", header=F)
k21 <- k21 %>% select(1:3)
colnames(k21) <- c("S1","S2","dist")
k21[c(list5per,list5perkh),]
k21[list5per,]
k21[list5perkh,]
list5 <- c(list5per,list5perkh)
list5
k21$SampleID[list5]
k21$SampleID[list5,]
k21$SampleID %in% list5
meta[list5,]
meta[list5,]$Site
meta[list5,]$SampleID
meta <- read.csv('Striga_GPS.csv', header=T)
meta$Site <- as.factor(str_replace(meta$Site, "2","") %>% str_trim())
meta <- meta %>% filter(SampleID %in% unique(k21$S1))
list5per <- filter(meta, Site != "Kisii" & Site != "HomaBay")$SampleID
list5perkh <- filter(meta, SampleID =="SH130" | SampleID =="SH134"|SampleID =="SH138"| SampleID =="SH139"|SampleID =="SH146"|SampleID =="SH124"|SampleID =="SH117"|SampleID =="SH113"|SampleID =="SH111"|SampleID =="SH104")$SampleID
list5per
list5perkh
c(list5per,list5perkh)
meta
meta
knitr::opts_chunk$set(echo = TRUE)
library(phyloseq)
install.packages('phyloseq')
install.packages('devtools') #assuming it is not already installed
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR(admin_password = 'Admin user password')
updateR()
getwd()
pdf(file="FigS1_FAO.pdf", width=7.5, height=9)
wrap_plots(sen_p, mal_p, bf_p, gha_p, ngr_p, nig_p, cam_p, sud_p, eth_p, ken_p)
dev.off()
getwd()
getwd()
install.packages(c("cowplot", "ggdendro"))
library(ggdendro)
library(dplyr)
library(ggplot2)
library(tidyr)
library(cowplot)
getwd()
library(ggdendro)
library(dplyr)
library(ggplot2)
library(tidyr)
library(cowplot)
################  load gps points for experimental studies
meta <- read.csv('../DataFiles/SI.dat.1.30.20.csv')
meta <- subset(meta, emergence != "NA") # 27 localities
colnames(meta)[3] <- "emg"
meta$locality <- factor(meta$locality, levels = c("Bambey", "Maradi", "Mintimbougou","FarakoBa","SinthionMaleme","Samaru","AbuNaama","Kamboinse","Kobo","Yendi","Tamale","WadMedani","Galadima","Bakura","Damaturu","Jibiya","Andre","Kankia","Bida","Gombe","Gumi","Busia","Gwoza","Mokwa","Ngezima","Kazgail","Obeid"))
install.packages("sf")
library(ggdendro)
library(dplyr)
library(ggplot2)
library(tidyr)
library(cowplot)
################  load gps points for experimental studies
meta <- read.csv('../DataFiles/SI.dat.1.30.20.csv')
library(ggdendro)
library(dplyr)
library(ggplot2)
library(tidyr)
library(cowplot)
################  load gps points for experimental studies
meta <- read.csv('../DataFiles/SI.dat.1.30.20.csv')
meta <- subset(meta, emergence != "NA") # 27 localities
colnames(meta)[3] <- "emg"
sqrt(300)
library(lubridate)
library(ggplot2)
library(tidyverse)
rice <- read.csv('rice_remote_sensing - Sheet1.csv', header=T)
rice$Date <- as.Date(rice$Date, "%m-%d-%Y")
rice <- subset(rice, Date != "2019-06-13")
#rice.long <- rice %>% pivot_longer(c(Train_MSE, Val_MSE))
rice.long <- rice %>% pivot_longer(c(Train_MSE, Val_MSE, Test_MSE))
ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name)) + geom_line(size=0.25) + facet_grid(Set~Model) + theme_bw() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) + scale_color_manual(values = c("black","grey70", "grey50"), name="Dataset", labels=c("Test", "Train", "Validation")) + scale_linetype(name="Fold") + ylab("RMSE") + theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.3)
#ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name)) + geom_line(size=0.4) + facet_grid(Set~Model) + theme_minimal() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) + scale_color_manual(values = c("grey70", "black"), name="Dataset", labels=c("Train", "Validation")) + scale_linetype(name="Fold") + ylab("RMSE") + theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.2)
library(lubridate)
library(ggplot2)
library(tidyverse)
rice <- read.csv('rice_remote_sensing - Sheet1.csv', header=T)
rice$Date <- as.Date(rice$Date, "%m-%d-%Y")
rice <- subset(rice, Date != "2019-06-13")
#rice.long <- rice %>% pivot_longer(c(Train_MSE, Val_MSE))
rice.long <- rice %>% pivot_longer(c(Train_MSE, Val_MSE, Test_MSE))
ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name, lty=name)) +
geom_line(size=0.25) + facet_grid(Set~Model) +
theme_bw() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) +
scale_color_manual(values = c("black","grey70", "grey50"), name="Dataset", labels=c("Test", "Train", "Validation")) +
scale_linetype(name="Fold") +
ylab("RMSE") +
theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.3)
#ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name)) + geom_line(size=0.4) + facet_grid(Set~Model) + theme_minimal() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) + scale_color_manual(values = c("grey70", "black"), name="Dataset", labels=c("Train", "Validation")) + scale_linetype(name="Fold") + ylab("RMSE") + theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.2)
ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name, lty=name)) +
geom_line(size=0.25) + facet_grid(Set~Model) +
theme_bw() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) +
scale_color_manual(values = c("black","grey70", "grey50"), name="Dataset", labels=c("Test", "Train", "Validation")) +
scale_linetype(name="Fold") +
ylab("RMSE") +
theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.3)
ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name, lty=name)) +
geom_line(size=0.25) + facet_grid(Set~Model) +
theme_bw() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) +
scale_color_manual(values = c("black","grey70", "grey50"), name="Dataset", labels=c("Test", "Train", "Validation")) +
scale_linetype(name="Dataset") +
ylab("RMSE") +
theme(axis.text.x = element_text(angle = 90, vjust=0.4))
library(lubridate)
library(ggplot2)
library(tidyverse)
rice <- read.csv('rice_remote_sensing - Sheet1.csv', header=T)
rice$Date <- as.Date(rice$Date, "%m-%d-%Y")
rice <- subset(rice, Date != "2019-06-13")
#rice.long <- rice %>% pivot_longer(c(Train_MSE, Val_MSE))
rice.long <- rice %>% pivot_longer(c(Train_MSE, Val_MSE, Test_MSE))
ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name, lty=name)) +
geom_line(size=0.25) + facet_grid(Set~Model) +
theme_bw() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) +
scale_color_manual(values = c("black","grey70", "grey50"), name="Dataset", labels=c("Test", "Train", "Validation")) +
scale_linetype(name="Dataset", labels=c("Test", "Train", "Validation")) +
ylab("RMSE") +
theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.3)
#ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name)) + geom_line(size=0.4) + facet_grid(Set~Model) + theme_minimal() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) + scale_color_manual(values = c("grey70", "black"), name="Dataset", labels=c("Train", "Validation")) + scale_linetype(name="Fold") + ylab("RMSE") + theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.2)
library(lubridate)
library(ggplot2)
library(tidyverse)
rice <- read.csv('rice_remote_sensing - Sheet1.csv', header=T)
rice$Date <- as.Date(rice$Date, "%m-%d-%Y")
rice <- subset(rice, Date != "2019-06-13")
#rice.long <- rice %>% pivot_longer(c(Train_MSE, Val_MSE))
rice.long <- rice %>% pivot_longer(c(Train_MSE, Val_MSE, Test_MSE))
ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name, lty=name)) +
geom_line(size=0.25) + facet_grid(Set~Model) +
theme_bw() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) +
scale_color_manual(values = c("black","grey70", "grey50"), name="Dataset", labels=c("Test", "Train", "Validation")) +
scale_linetype(name="Dataset", labels=c("Test", "Train", "Validation")) +
ylab("RMSE") +
theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.3)
#ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name)) + geom_line(size=0.4) + facet_grid(Set~Model) + theme_minimal() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) + scale_color_manual(values = c("grey70", "black"), name="Dataset", labels=c("Train", "Validation")) + scale_linetype(name="Fold") + ylab("RMSE") + theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.2)
ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name, lty=name)) +
geom_line(size=0.25) + facet_grid(Set~Model) +
theme_bw() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) +
scale_color_manual(values = c("black","grey70", "grey50"), name="Dataset", labels=c("Test", "Train", "Validation")) +
scale_linetype(name="Dataset", labels=c("Test", "Train", "Validation")) +
ylab("RMSE") +
theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.3)
library(raster)
library(rgdal)
library(sf)
library(stringr)
library(ggplot2)
library(tidyverse)
setwd('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/get_max_val.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/process_VIs.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/output_labels.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/create_daystack.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/output_images.R')
path_to <- "/Volumes/ABISSD/"
yld <- raster(paste0(path_to,'Yield.tif')) # utm, 5 cm resolution
yld.5 <- aggregate(yld, 10) # 0.5 x 0.5 m resolution
crop_extent <- readOGR(paste0(path_to,"04-11-2019/Carr_N_Without_Ditch.shp"))
yld.5d <- crop(yld.5, crop_extent)
yld.5dm <- mask(yld.5d, crop_extent)
e.train <- c(617769.6, 618159.6, 3828596, 3828776)
e.val <- c(617769.6,617964.6,3828776, 3828956)
e.test <- c(617964.6,618159.6,3828776, 3828956)
flydays <- c("04-11-2019","05-21-2019","06-29-2019","07-11-2019","08-01-2019", "08-13-2019", "08-21-2019","08-28-2019","09-07-2019","09-13-2019")
channels <- c("CIgreen.tif","GNDVI.tif","NAVI.tif","NDVI.tif","RENDVI.tif","TGI.tif","Thermal.tif")
path_to_raster <- "/Volumes/ABISSD/"
vis.list <- str_replace(channels, '.tif', '')
j = 5
############################### Output model performance by day
## set up dataframe
results <- data.frame(row.names = 1:length(flydays), Set = "B", Date = flydays, Train_MSE = "", Val_MSE = "", Test_MSE = "")
daystack <- create_daystack(path_to_raster, flydays[j], channels, yld.5dm)
# mask so all have same number of NA's and number of images is same
mostnas_idx <- which.max(as.matrix(cellStats(daystack, stat='countNA')))
yld.dayna <- mask(yld.5dm, daystack[[mostnas_idx]])
daystack <- mask(daystack, daystack[[mostnas_idx]])
daystack <- stack(daystack, yld.dayna)
# split into test, validation, training sets
train <- crop(daystack, e.train)
val <- crop(daystack, e.val)
test <- crop(daystack, e.test)
# create dataframe for each set
train.df <- as.data.frame(na.omit(as.matrix(train))) # drop any rows with NA for any vegetation index
test.df <- as.data.frame(na.omit(as.matrix(test)))
val.df <- as.data.frame(na.omit(as.matrix(val)))
# fit linear model
mod <- lm(Yield ~ CIgreen + GNDVI + NAVI + NDVI + RENDVI + TGI + Thermal, data = train.df)
mod
summary(mod)
library(raster)
library(rgdal)
library(sf)
library(stringr)
library(ggplot2)
setwd('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/get_max_val.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/process_VIs.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/output_labels.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/create_daystack.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/output_images.R')
path_to <- "/Volumes/ABISSD/"
yld <- raster(paste0(path_to,'Yield.tif')) # utm, 5 cm resolution
yld.5 <- aggregate(yld, 10) # 0.5 x 0.5 m resolution
crop_extent <- readOGR(paste0(path_to,"04-11-2019/Carr_N_Without_Ditch.shp"))
yld.5d <- crop(yld.5, crop_extent)
yld.5dm <- mask(yld.5d, crop_extent) # 5616 cells; 5235 of these are non-NA
e.train <- c(617769.6, 618159.6, 3828596, 3828776)
e.val <- c(617769.6,617964.6,3828776, 3828956)
e.test <- c(617964.6,618159.6,3828776, 3828956)
flydays <- c("04-11-2019","05-21-2019","06-13-2019","06-29-2019","07-11-2019","08-01-2019", "08-13-2019", "08-21-2019","08-28-2019","09-07-2019","09-13-2019")
channels <- c("CIgreen.tif","GNDVI.tif","NAVI.tif","NDVI.tif","RENDVI.tif","TGI.tif","Thermal.tif")
path_to_raster <- "/Volumes/ABISSD/"
vis.list <- str_replace(channels, '.tif', '')
############################### output project for 1 day based on linear model
j = 6
daystack <- create_daystack(path_to_raster, flydays[j], channels, yld.5dm)
daystack
# mask so all have same number of NA's and number of images is same
mostnas_idx <- which.max(as.matrix(cellStats(daystack, stat='countNA')))
yld.dayna <- mask(yld.5dm, daystack[[mostnas_idx]])
daystack <- mask(daystack, daystack[[mostnas_idx]])
?predict
r1_linear <- raster::predict(daystack, mod, progress = 'text')
plot(r1_linear)
plot(yld.5dm)
plot(r1_linear - yld.5dm)
plot(r1_linear - yld.5dm)
library(raster)
library(rgdal)
library(sf)
library(stringr)
library(ggplot2)
setwd('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/get_max_val.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/process_VIs.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/output_labels.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/create_daystack.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/output_images.R')
path_to <- "/Volumes/ABISSD/"
yld <- raster(paste0(path_to,'Yield.tif')) # utm, 5 cm resolution
yld.5 <- aggregate(yld, 10) # 0.5 x 0.5 m resolution
crop_extent <- readOGR(paste0(path_to,"04-11-2019/Carr_N_Without_Ditch.shp"))
yld.5d <- crop(yld.5, crop_extent)
yld.5dm <- mask(yld.5d, crop_extent) # 5616 cells; 5235 of these are non-NA
## process all other layers (downsample, crop, mask); make raster stacks for each day; split into test, train, and validation sets; split each of these into 5x5 pixel subimages and then save each image and channel separately as .csv file
flydays <- c("04-11-2019","05-21-2019","06-13-2019","06-29-2019","07-11-2019","08-01-2019", "08-13-2019", "08-21-2019","08-28-2019","09-07-2019","09-13-2019")
channels <- c("CIgreen.tif","GNDVI.tif","NAVI.tif","NDVI.tif","RENDVI.tif","TGI.tif","Thermal.tif")
path_to_raster <- "/Volumes/ABISSD/"
vis.list <- str_replace(channels, '.tif', '')
############################### output project for 1 day based on linear model
j = 6
plot(r1_linear - yld.5dm)
daystack <- create_daystack(path_to_raster, flydays[j], channels, yld.5dm) # raster stack for a single day
mostnas_idx <- which.max(as.matrix(cellStats(daystack, stat='countNA')))
yld.dayna <- mask(yld.5dm, daystack[[mostnas_idx]])
daystack <- mask(daystack, daystack[[mostnas_idx]])
daystack
stack(daystack, yld.5dm)
yld.5dm[1,1]
yld.5dm[10,10]
yld.5dm[717,717]
yld.5dm[717,782]
?seq
yld.5dm[1:5,1:5]
mat(yld.5dm[1:5,1:5])
daystack[1:5,1:5]
as.matrix(daystack(1:5, 1:5))
as.matrix(daystack[1:5, 1:5])
values(pred_yld) <- "NA"
# create a new raster layer with extent of the yield layer
pred_yld <- yld.5dm
values(pred_yld) <- "NA"
values(pred_yld) <- NA
plot(pred_yld)
?extent
?crop
######## replace values with model predictions
# get 5x5 section of image
crop(daystack, extent(daystack, 1,5,1,5)) # crop using row and column numbers
head(daystack)
tail(daystack)
daystack[100:105, 100:105]
daystack[1000:1005, 1000:1005]
daystack[500:505, 500:505]
######## replace values with model predictions
# get 5x5 section of image
crop(daystack, extent(daystack, 500,505,500,505)) # crop using row and column numbers
install.packages('reticulate')
# convert to numpy array
library(reticulate)
knitr::opts_chunk$set(echo = TRUE)
library(raster)
library(rgdal)
library(sf)
library(stringr)
library(ggplot2)
setwd('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/get_max_val.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/process_VIs.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/output_labels.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/create_daystack.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/output_images.R')
path_to <- "/Volumes/ABISSD/"
## get yield data layer, downsample, mask; base all other layers on this layer
yld <- raster(paste0(path_to,'Yield.tif')) # utm, 5 cm resolution
yld.5 <- aggregate(yld, 10) # 0.5 x 0.5 m resolution
crop_extent <- readOGR(paste0(path_to,"04-11-2019/Carr_N_Without_Ditch.shp"))
yld.5d <- crop(yld.5, crop_extent)
yld.5dm <- mask(yld.5d, crop_extent) # 5616 cells; 5235 of these are non-NA
## process all other layers (downsample, crop, mask); make raster stacks for each day; split into test, train, and validation sets; split each of these into 5x5 pixel subimages and then save each image and channel separately as .csv file
flydays <- c("04-11-2019","05-21-2019","06-13-2019","06-29-2019","07-11-2019","08-01-2019", "08-13-2019", "08-21-2019","08-28-2019","09-07-2019","09-13-2019")
channels <- c("CIgreen.tif","GNDVI.tif","NAVI.tif","NDVI.tif","RENDVI.tif","TGI.tif","Thermal.tif")
path_to_raster <- "/Volumes/ABISSD/"
vis.list <- str_replace(channels, '.tif', '')
############################### output project for 1 day based on linear model
j = 6
daystack <- create_daystack(path_to_raster, flydays[j], channels, yld.5dm) # raster stack for a single day
# mask so all have same number of NA's and number of images is same
mostnas_idx <- which.max(as.matrix(cellStats(daystack, stat='countNA')))
yld.dayna <- mask(yld.5dm, daystack[[mostnas_idx]])
daystack <- mask(daystack, daystack[[mostnas_idx]])
# create a new raster layer with extent of the yield layer
pred_yld <- yld.5dm
values(pred_yld) <- NA
knitr::opts_chunk$set(echo = TRUE, root.dir = '~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
library(raster)
library(rgdal)
library(sf)
library(stringr)
library(ggplot2)
#setwd('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/get_max_val.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/process_VIs.R')
#setwd('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
source('get_max_val.R')
knitr::opts_chunk$set(echo = TRUE, root.dir = '~/Documents/GitHub/XASU_rice/1_process_TIF_layers')
library(raster)
library(rgdal)
library(sf)
library(stringr)
library(ggplot2)
#setwd('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
source('get_max_val.R')
knitr::opts_chunk$set(echo = TRUE, root.dir = '~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
#setwd('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/get_max_val.R')
library(raster)
library(rgdal)
library(sf)
library(stringr)
library(ggplot2)
#setwd('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/get_max_val.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/process_VIs.R')
#setwd('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/get_max_val.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/process_VIs.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/output_labels.R')
library(raster)
library(rgdal)
library(sf)
library(stringr)
library(ggplot2)
#setwd('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/get_max_val.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/process_VIs.R')
#setwd('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/get_max_val.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/process_VIs.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/output_labels.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/create_daystack.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/output_images.R')
path_to <- "/Volumes/ABISSD/"
daystack
# create a new raster layer with extent of the yield layer
pred_yld <- yld.5dm
values(pred_yld) <- NA
plot(pred_yld)
plot(pred_yld)
pred_yld
library(reticulate)
# get 5x5 section of image
crop(daystack, extent(daystack, 500,505,500,505)) # crop using row and column numbers
library(reticulate)
use_condaenv("py36")
library(reticulate)
use_condaenv("py36")
