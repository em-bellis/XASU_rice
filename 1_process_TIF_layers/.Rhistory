library(phyloseq)
install.packages('phyloseq')
install.packages('devtools') #assuming it is not already installed
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR(admin_password = 'Admin user password')
updateR()
getwd()
pdf(file="FigS1_FAO.pdf", width=7.5, height=9)
wrap_plots(sen_p, mal_p, bf_p, gha_p, ngr_p, nig_p, cam_p, sud_p, eth_p, ken_p)
dev.off()
getwd()
getwd()
install.packages(c("cowplot", "ggdendro"))
library(ggdendro)
library(dplyr)
library(ggplot2)
library(tidyr)
library(cowplot)
getwd()
library(ggdendro)
library(dplyr)
library(ggplot2)
library(tidyr)
library(cowplot)
################  load gps points for experimental studies
meta <- read.csv('../DataFiles/SI.dat.1.30.20.csv')
meta <- subset(meta, emergence != "NA") # 27 localities
colnames(meta)[3] <- "emg"
meta$locality <- factor(meta$locality, levels = c("Bambey", "Maradi", "Mintimbougou","FarakoBa","SinthionMaleme","Samaru","AbuNaama","Kamboinse","Kobo","Yendi","Tamale","WadMedani","Galadima","Bakura","Damaturu","Jibiya","Andre","Kankia","Bida","Gombe","Gumi","Busia","Gwoza","Mokwa","Ngezima","Kazgail","Obeid"))
install.packages("sf")
library(ggdendro)
library(dplyr)
library(ggplot2)
library(tidyr)
library(cowplot)
################  load gps points for experimental studies
meta <- read.csv('../DataFiles/SI.dat.1.30.20.csv')
library(ggdendro)
library(dplyr)
library(ggplot2)
library(tidyr)
library(cowplot)
################  load gps points for experimental studies
meta <- read.csv('../DataFiles/SI.dat.1.30.20.csv')
meta <- subset(meta, emergence != "NA") # 27 localities
colnames(meta)[3] <- "emg"
sqrt(300)
library(lubridate)
library(ggplot2)
library(tidyverse)
rice <- read.csv('rice_remote_sensing - Sheet1.csv', header=T)
rice$Date <- as.Date(rice$Date, "%m-%d-%Y")
rice <- subset(rice, Date != "2019-06-13")
#rice.long <- rice %>% pivot_longer(c(Train_MSE, Val_MSE))
rice.long <- rice %>% pivot_longer(c(Train_MSE, Val_MSE, Test_MSE))
ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name)) + geom_line(size=0.25) + facet_grid(Set~Model) + theme_bw() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) + scale_color_manual(values = c("black","grey70", "grey50"), name="Dataset", labels=c("Test", "Train", "Validation")) + scale_linetype(name="Fold") + ylab("RMSE") + theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.3)
#ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name)) + geom_line(size=0.4) + facet_grid(Set~Model) + theme_minimal() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) + scale_color_manual(values = c("grey70", "black"), name="Dataset", labels=c("Train", "Validation")) + scale_linetype(name="Fold") + ylab("RMSE") + theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.2)
library(lubridate)
library(ggplot2)
library(tidyverse)
rice <- read.csv('rice_remote_sensing - Sheet1.csv', header=T)
rice$Date <- as.Date(rice$Date, "%m-%d-%Y")
rice <- subset(rice, Date != "2019-06-13")
#rice.long <- rice %>% pivot_longer(c(Train_MSE, Val_MSE))
rice.long <- rice %>% pivot_longer(c(Train_MSE, Val_MSE, Test_MSE))
ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name, lty=name)) +
geom_line(size=0.25) + facet_grid(Set~Model) +
theme_bw() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) +
scale_color_manual(values = c("black","grey70", "grey50"), name="Dataset", labels=c("Test", "Train", "Validation")) +
scale_linetype(name="Fold") +
ylab("RMSE") +
theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.3)
#ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name)) + geom_line(size=0.4) + facet_grid(Set~Model) + theme_minimal() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) + scale_color_manual(values = c("grey70", "black"), name="Dataset", labels=c("Train", "Validation")) + scale_linetype(name="Fold") + ylab("RMSE") + theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.2)
ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name, lty=name)) +
geom_line(size=0.25) + facet_grid(Set~Model) +
theme_bw() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) +
scale_color_manual(values = c("black","grey70", "grey50"), name="Dataset", labels=c("Test", "Train", "Validation")) +
scale_linetype(name="Fold") +
ylab("RMSE") +
theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.3)
ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name, lty=name)) +
geom_line(size=0.25) + facet_grid(Set~Model) +
theme_bw() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) +
scale_color_manual(values = c("black","grey70", "grey50"), name="Dataset", labels=c("Test", "Train", "Validation")) +
scale_linetype(name="Dataset") +
ylab("RMSE") +
theme(axis.text.x = element_text(angle = 90, vjust=0.4))
library(lubridate)
library(ggplot2)
library(tidyverse)
rice <- read.csv('rice_remote_sensing - Sheet1.csv', header=T)
rice$Date <- as.Date(rice$Date, "%m-%d-%Y")
rice <- subset(rice, Date != "2019-06-13")
#rice.long <- rice %>% pivot_longer(c(Train_MSE, Val_MSE))
rice.long <- rice %>% pivot_longer(c(Train_MSE, Val_MSE, Test_MSE))
ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name, lty=name)) +
geom_line(size=0.25) + facet_grid(Set~Model) +
theme_bw() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) +
scale_color_manual(values = c("black","grey70", "grey50"), name="Dataset", labels=c("Test", "Train", "Validation")) +
scale_linetype(name="Dataset", labels=c("Test", "Train", "Validation")) +
ylab("RMSE") +
theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.3)
#ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name)) + geom_line(size=0.4) + facet_grid(Set~Model) + theme_minimal() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) + scale_color_manual(values = c("grey70", "black"), name="Dataset", labels=c("Train", "Validation")) + scale_linetype(name="Fold") + ylab("RMSE") + theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.2)
library(lubridate)
library(ggplot2)
library(tidyverse)
rice <- read.csv('rice_remote_sensing - Sheet1.csv', header=T)
rice$Date <- as.Date(rice$Date, "%m-%d-%Y")
rice <- subset(rice, Date != "2019-06-13")
#rice.long <- rice %>% pivot_longer(c(Train_MSE, Val_MSE))
rice.long <- rice %>% pivot_longer(c(Train_MSE, Val_MSE, Test_MSE))
ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name, lty=name)) +
geom_line(size=0.25) + facet_grid(Set~Model) +
theme_bw() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) +
scale_color_manual(values = c("black","grey70", "grey50"), name="Dataset", labels=c("Test", "Train", "Validation")) +
scale_linetype(name="Dataset", labels=c("Test", "Train", "Validation")) +
ylab("RMSE") +
theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.3)
#ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name)) + geom_line(size=0.4) + facet_grid(Set~Model) + theme_minimal() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) + scale_color_manual(values = c("grey70", "black"), name="Dataset", labels=c("Train", "Validation")) + scale_linetype(name="Fold") + ylab("RMSE") + theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.2)
ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name, lty=name)) +
geom_line(size=0.25) + facet_grid(Set~Model) +
theme_bw() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) +
scale_color_manual(values = c("black","grey70", "grey50"), name="Dataset", labels=c("Test", "Train", "Validation")) +
scale_linetype(name="Dataset", labels=c("Test", "Train", "Validation")) +
ylab("RMSE") +
theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.3)
knitr::opts_chunk$set(echo = TRUE, root.dir = '~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
library(reticulate)
use_python('/opt/anaconda2/envs/py36/bin/python')
py_config()
#conda_create("r-reticulate_rice")
use_condaenv("r-reticulate_rice")
#conda_install("r-reticulate_rice", "tensorflow")
library(reticulate)
#use_python('/opt/anaconda2/envs/py36/bin/python')
py_config()
#conda_create("r-reticulate_rice")
use_condaenv("r-reticulate_rice")
#conda_install("r-reticulate_rice", "tensorflow")
#conda_install("r-reticulate_rice", "tensorflow")
conda_list("r-reticulate_rice")
#conda_install("r-reticulate_rice", "tensorflow")
condaenv_list("r-reticulate_rice")
#conda_install("r-reticulate_rice", "tensorflow")
conda_env_list("r-reticulate_rice")
library(reticulate)
#use_python('/opt/anaconda2/envs/py36/bin/python')
py_config()
#conda_create("r-reticulate_rice")
use_condaenv("r-reticulate_rice")
#conda_install("r-reticulate_rice", "tensorflow")
conda_env_list("r-reticulate_rice")
reticulate::py_discover_config("tensorflow")
library(reticulate)
use_condaenv("r-reticulate_rice")
#use_python('/opt/anaconda2/envs/py36/bin/python')
py_config()
#conda_create("r-reticulate_rice")
library(reticulate)
use_condaenv("r-reticulate_rice")
py_config()
#use_python('/opt/anaconda2/envs/py36/bin/python')
#conda_create("r-reticulate_rice")
knitr::opts_chunk$set(echo = TRUE, root.dir = '~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
library(reticulate)
use_condaenv("r-reticulate_rice")
py_config()
#use_python('/opt/anaconda2/envs/py36/bin/python')
#conda_create("r-reticulate_rice")
library(reticulate)
use_python('/opt/anaconda2/envs/py36/bin/python')
use_condaenv("r-reticulate_rice")
reticulate::py_config()
#use_python('/opt/anaconda2/envs/py36/bin/python')
#conda_create("r-reticulate_rice")
library(reticulate)
#use_python('/opt/anaconda2/envs/py36/bin/python')
use_condaenv("r-reticulate_rice")
reticulate::py_config()
#use_python('/opt/anaconda2/envs/py36/bin/python')
#conda_create("r-reticulate_rice")
library(reticulate)
#use_python('/opt/anaconda2/envs/py36/bin/python')
use_condaenv("r-reticulate_rice")
reticulate::py_config()
#use_python('/opt/anaconda2/envs/py36/bin/python')
#conda_create("r-reticulate_rice")
library(reticulate)
use_python('/Users/ebellis/Library/r-miniconda/envs/r-reticulate_rice/bin/python')
use_condaenv("r-reticulate_rice")
reticulate::py_config()
#use_python('/opt/anaconda2/envs/py36/bin/python')
#conda_create("r-reticulate_rice")
install.packages('tensorflow')
library(tensorflow)
library(reticulate)
use_condaenv("r-reticulate_rice", required=T)
library(reticulate)
use_python('/Users/ebellis/Library/r-miniconda/envs/r-reticulate_rice/bin/python')
use_condaenv("r-reticulate_rice", required = T)
library(reticulate)
use_python('/Users/ebellis/Library/r-miniconda/envs/r-reticulate_rice/bin/python', required = T)
#use_python('/Users/ebellis/Library/r-miniconda/envs/r-reticulate_rice/bin/python', required = T)
use_condaenv("r-reticulate_rice", required = T)
repl_python
library(reticulate)
repl_python()
#use_python('/Users/ebellis/Library/r-miniconda/envs/r-reticulate_rice/bin/python', required = T)
#use_condaenv("r-reticulate_rice", required = T)
#reticulate::py_config()
#use_python('/opt/anaconda2/envs/py36/bin/python')
#conda_create("r-reticulate_rice")
#repl_python()
use_python('/Users/ebellis/Library/r-miniconda/envs/r-reticulate_rice/bin/python', required = T)
knitr::opts_chunk$set(echo = TRUE, root.dir = '~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
library(reticulate)
#use_python('/Users/ebellis/Library/r-miniconda/envs/r-reticulate_rice/bin/python', required = T)
use_condaenv("py36", required = T)
reticulate::py_config() # had to change .Renviron file on my system to get python version from conda env and load packages
#repl_python()
library(reticulate)
#use_python('/Users/ebellis/Library/r-miniconda/envs/r-reticulate_rice/bin/python', required = T)
use_condaenv("r-reticulate_rice", required = T)
reticulate::py_config() # had to change .Renviron file on my system to get python version from conda env and load packages
#repl_python()
library(raster)
yld
raster("/Volumes/ABISSD/Yield.tif")
library(sf)
library(sp)
?CRS
version()
version
seq(1,(dim(mat)[1]-4),5)
seq(1,(dim(pred_yld)[1]-4),5)
dim(pred_yld)
ls
getwd()
pred <- raster('projectCNN_Aug01.tif')
plot(pred)
knitr::opts_chunk$set(echo = TRUE)
path_to <- "/Volumes/ABISSD/"
library(raster)
path_to <- "/Volumes/ABISSD/"
yld <- raster(paste0(path_to,'Yield.tif')) # utm, 5 cm resolution
yld.5 <- aggregate(yld, 10) # 0.5 x 0.5 m resolution
crop_extent <- readOGR(paste0(path_to,"04-11-2019/Carr_N_Without_Ditch.shp"))
library(raster)
library(rgdal)
# plot observed yield
path_to <- "/Volumes/ABISSD/"
yld <- raster(paste0(path_to,'Yield.tif')) # utm, 5 cm resolution
yld.5 <- aggregate(yld, 10) # 0.5 x 0.5 m resolution
crop_extent <- readOGR(paste0(path_to,"04-11-2019/Carr_N_Without_Ditch.shp"))
yld.5d <- crop(yld.5, crop_extent)
yld.5dm <- mask(yld.5d, crop_extent)
# plot predicted yield
plot(yld)
plot(yld.5dm)
yld.5dm
pred
plot(pred)
hist(yld.5dm)
quantile(yld.5dm)
?quantile
quantile(yld.5dm, probs = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9))
quantile(pred, probs = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9))
hist(yld.5dm)
hist(pred)
pred
quantile(pred, probs = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9))
cuts=c(150,160,170,180,190)
plot(pred, breaks = cuts)
plot(pred, breaks = cuts, col = viridis(7))
library(viridis)
plot(pred, breaks = cuts, col = viridis(7))
cuts=c(140, 150,160,170,180,190)
plot(pred, breaks = cuts, col = viridis(7))
plot(pred, breaks = cuts, col = viridis(8))
cuts=c(140, 150,160,170,180,190,200)
plot(pred, breaks = cuts, col = viridis(8))
plot(yld.5dm, breaks = cuts, col = viridis(8))
yld.5dm
cuts=c(140, 150,160,170,180,190,200,230)
plot(yld.5dm, breaks = cuts, col = viridis(8))
cuts=c(10, 150,160,170,180,190,200,230)
plot(yld.5dm, breaks = cuts, col = viridis(8))
quantile(pred, probs = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9))
plot(pred, breaks = cuts, col = viridis(8))
cutsp <- quantile(pred, probs = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9))
plot(pred, breaks = cutsp, col = viridis(8))
plot(yld.5dm, breaks = cutsp, col = viridis(8))
cutsp <- quantile(yld.5dm, probs = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0))
plot(yld.5dm, breaks = cutsp, col = viridis(8))
cutsp <- quantile(yld.5dm, probs = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9))
plot(yld.5dm, breaks = cutsp, col = viridis(8))
cutsp <- quantile(yld.5dm, probs = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9))
plot(yld.5dm, breaks = cutsp, col = viridis(8))
plot(pred, breaks = cutsp, col = viridis(8))
e.train <- c(617769.6, 618159.6, 3828596, 3828776)
e.val <- c(617769.6,617964.6,3828776, 3828956)
e.test <- c(617964.6,618159.6,3828776, 3828956)
############################### Output model performance by day
## set up dataframe
results <- data.frame(row.names = 1:length(flydays), Set = "B", Date = flydays, Train_MSE = "", Val_MSE = "", Test_MSE = "")
flydays <- c("04-11-2019","05-21-2019","06-29-2019","07-11-2019","08-01-2019", "08-13-2019", "08-21-2019","08-28-2019","09-07-2019","09-13-2019")
channels <- c("CIgreen.tif","GNDVI.tif","NAVI.tif","NDVI.tif","RENDVI.tif","TGI.tif","Thermal.tif")
path_to_raster <- "/Volumes/ABISSD/"
vis.list <- str_replace(channels, '.tif', '')
############################### Output model performance by day
## set up dataframe
results <- data.frame(row.names = 1:length(flydays), Set = "B", Date = flydays, Train_MSE = "", Val_MSE = "", Test_MSE = "")
for (j in 1:length(flydays)) {
daystack <- create_daystack(path_to_raster, flydays[j], channels, yld.5dm)
# mask so all have same number of NA's and number of images is same
mostnas_idx <- which.max(as.matrix(cellStats(daystack, stat='countNA')))
yld.dayna <- mask(yld.5dm, daystack[[mostnas_idx]])
daystack <- mask(daystack, daystack[[mostnas_idx]])
daystack <- stack(daystack, yld.dayna)
# split into test, validation, training sets
train <- crop(daystack, e.train)
val <- crop(daystack, e.val)
test <- crop(daystack, e.test)
# create dataframe for each set
train.df <- as.data.frame(na.omit(as.matrix(train))) # drop any rows with NA for any vegetation index
test.df <- as.data.frame(na.omit(as.matrix(test)))
val.df <- as.data.frame(na.omit(as.matrix(val)))
# fit linear model
mod <- lm(Yield ~ CIgreen + GNDVI + NAVI + NDVI + RENDVI + TGI + Thermal, data = train.df)
# calculate MSE on training, test, and validation sets
train.df$preds <- predict(mod, train.df)
train.mse <- mean((train.df$Yield - train.df$preds)^2)
results$Train_MSE[j] <- train.mse
test.df$preds <- predict(mod, test.df)
test.mse <- mean((test.df$Yield - test.df$preds)^2)
results$Test_MSE[j] <- test.mse
val.df$preds <- predict(mod, val.df)
val.mse <- mean((val.df$Yield - val.df$preds)^2)
results$Val_MSE[j] <- val.mse
message(paste0("Done with ", flydays[j]))
}
setwd('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/get_max_val.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/process_VIs.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/output_labels.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/create_daystack.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/output_images.R')
for (j in 1:length(flydays)) {
daystack <- create_daystack(path_to_raster, flydays[j], channels, yld.5dm)
# mask so all have same number of NA's and number of images is same
mostnas_idx <- which.max(as.matrix(cellStats(daystack, stat='countNA')))
yld.dayna <- mask(yld.5dm, daystack[[mostnas_idx]])
daystack <- mask(daystack, daystack[[mostnas_idx]])
daystack <- stack(daystack, yld.dayna)
# split into test, validation, training sets
train <- crop(daystack, e.train)
val <- crop(daystack, e.val)
test <- crop(daystack, e.test)
# create dataframe for each set
train.df <- as.data.frame(na.omit(as.matrix(train))) # drop any rows with NA for any vegetation index
test.df <- as.data.frame(na.omit(as.matrix(test)))
val.df <- as.data.frame(na.omit(as.matrix(val)))
# fit linear model
mod <- lm(Yield ~ CIgreen + GNDVI + NAVI + NDVI + RENDVI + TGI + Thermal, data = train.df)
# calculate MSE on training, test, and validation sets
train.df$preds <- predict(mod, train.df)
train.mse <- mean((train.df$Yield - train.df$preds)^2)
results$Train_MSE[j] <- train.mse
test.df$preds <- predict(mod, test.df)
test.mse <- mean((test.df$Yield - test.df$preds)^2)
results$Test_MSE[j] <- test.mse
val.df$preds <- predict(mod, val.df)
val.mse <- mean((val.df$Yield - val.df$preds)^2)
results$Val_MSE[j] <- val.mse
message(paste0("Done with ", flydays[j]))
}
library(stringr)
library(ggplot2)
library(tidyverse)
for (j in 1:length(flydays)) {
daystack <- create_daystack(path_to_raster, flydays[j], channels, yld.5dm)
# mask so all have same number of NA's and number of images is same
mostnas_idx <- which.max(as.matrix(cellStats(daystack, stat='countNA')))
yld.dayna <- mask(yld.5dm, daystack[[mostnas_idx]])
daystack <- mask(daystack, daystack[[mostnas_idx]])
daystack <- stack(daystack, yld.dayna)
# split into test, validation, training sets
train <- crop(daystack, e.train)
val <- crop(daystack, e.val)
test <- crop(daystack, e.test)
# create dataframe for each set
train.df <- as.data.frame(na.omit(as.matrix(train))) # drop any rows with NA for any vegetation index
test.df <- as.data.frame(na.omit(as.matrix(test)))
val.df <- as.data.frame(na.omit(as.matrix(val)))
# fit linear model
mod <- lm(Yield ~ CIgreen + GNDVI + NAVI + NDVI + RENDVI + TGI + Thermal, data = train.df)
# calculate MSE on training, test, and validation sets
train.df$preds <- predict(mod, train.df)
train.mse <- mean((train.df$Yield - train.df$preds)^2)
results$Train_MSE[j] <- train.mse
test.df$preds <- predict(mod, test.df)
test.mse <- mean((test.df$Yield - test.df$preds)^2)
results$Test_MSE[j] <- test.mse
val.df$preds <- predict(mod, val.df)
val.mse <- mean((val.df$Yield - val.df$preds)^2)
results$Val_MSE[j] <- val.mse
message(paste0("Done with ", flydays[j]))
}
j = 6
j = 5
daystack <- create_daystack(path_to_raster, flydays[j], channels, yld.5dm)
# mask so all have same number of NA's and number of images is same
mostnas_idx <- which.max(as.matrix(cellStats(daystack, stat='countNA')))
yld.dayna <- mask(yld.5dm, daystack[[mostnas_idx]])
daystack <- mask(daystack, daystack[[mostnas_idx]])
daystack <- stack(daystack, yld.dayna)
# split into test, validation, training sets
train <- crop(daystack, e.train)
val <- crop(daystack, e.val)
test <- crop(daystack, e.test)
# create dataframe for each set
train.df <- as.data.frame(na.omit(as.matrix(train))) # drop any rows with NA for any vegetation index
test.df <- as.data.frame(na.omit(as.matrix(test)))
val.df <- as.data.frame(na.omit(as.matrix(val)))
# fit linear model
mod <- lm(Yield ~ CIgreen + GNDVI + NAVI + NDVI + RENDVI + TGI + Thermal, data = train.df)
e.train
mod
# predict
r1_linear <- raster::predict(daystack, mod, progress = 'text')
r1_linear
# plot
cuts=c(10, 150,160,170,180,190,200,230)
plot(yld.5dm, breaks = cutsp, col = viridis(8))
plot(yld.5dm, breaks = cuts, col = viridis(8))
plot(yld.5dm, breaks = cuts, col = viridis(4))
plot(yld.5dm, breaks = cuts, col = viridis(8))
plot(yld.5dm, breaks = cuts, col = viridis(9))
plot(yld.5dm, breaks = cuts, col = viridis(7))
plot(r1_linear, breaks = cuts, col = viridis(7))
plot(pred, breaks = cuts, col = viridis(7))
# plot diff
l_v_o <- r1_linear - yld.5dm
c_v_o <- pred - yld.5dm
pred
yld.5dm
c_v_o
plot(c_v_o)
plot(l_v_o)
cuts3 <- c(-100, -50, 0, 50, 100)
plot(l_v_o, breaks = cuts3, col=viridis(7))
plot(l_v_o, breaks = cuts3, col=viridis(4))
plot(l_v_o, breaks = cuts3, col=viridis(3))
plot(l_v_o, breaks = cuts3, col=viridis(5))
plot(l_v_o, breaks = cuts3, col=viridis(4))
plot(c_v_o, breaks = cuts3, col=viridis(4))
plot(c_v_o, breaks = cuts3, col=c("red","pink","lightblue","blue")
)
plot(l_v_o, breaks = cuts3, col=c("red","pink","lightblue","blue"))
c_v_o <- yld.5dm - pred
# plot diff
l_v_o <- yld.5dm - r1_linear
hist(l_v_o)
hist(c_v_o)
hist(l_v_o)
cuts3 <- c(-100, -75, -50, -25, 0, 25, 50, 75, 100)
plot(c_v_o, breaks = cuts3, col=viridis(10))
plot(c_v_o, breaks = cuts3, col=viridis(8))
plot(c_v_o, breaks = cuts3, col=viridis(4))
plot(c_v_o, breaks = cuts3, col=viridis(7))
plot(c_v_o, breaks = cuts3, col=viridis(8))
scale_color_gradient2(midpoint = mid, low = "blue", mid = "white",
high = "red", space = "Lab" )
scale_color_gradient2(midpoint = mid, low = "blue", mid = "white",
high = "red", space = "Lab" )
library(RColorBrewer)
brewer.pal(8, "RdYlBu")
plot(c_v_o, breaks = cuts3, col=brewer.pal(8, "RdYlBu")
)
plot(l_v_o, breaks = cuts3, col=brewer.pal(8, "RdYlBu"))
plot(r1_linear, breaks = cuts, col = viridis(7))
plot(yld.5dm, breaks = cuts, col = viridis(7))
plot(pred, breaks = cuts, col = viridis(7))
plot(r1_linear, breaks = cuts, col = viridis(7))
quantile(yld.5m, c(0.1, 0.25, 0.5, 0.75, 0.9))
quantile(yld.5dm, c(0.1, 0.25, 0.5, 0.75, 0.9))
plot(yld.5dm, breaks = cuts2, col=brewer.pal(8, "RdYlBu"))
cuts2=c(10, 154,166,178,187,194,230) #  quantile(yld.5dm, c(0.1, 0.25, 0.5, 0.75, 0.9))
plot(yld.5dm, breaks = cuts2, col=brewer.pal(8, "RdYlBu"))
plot(pred, breaks = cuts2, col=brewer.pal(8, "RdYlBu"))
plot(r1_linear, breaks = cuts2, col=brewer.pal(8, "RdYlBu"))
plot(yld.5dm, breaks = cuts2, col=brewer.pal(8, "RdYlBu"), title = "test")
plot(yld.5dm, breaks = cuts2, col=brewer.pal(8, "RdYlBu"), title = "test")
plot(yld.5dm, breaks = cuts2, col=brewer.pal(8, "RdYlBu"), main = "test")
plot(pred, breaks = cuts2, col=brewer.pal(8, "RdYlBu"), main = "Predicted (2D-CNN)", add=T)
plot(yld.5dm, breaks = cuts2, col=brewer.pal(8, "RdYlBu"), main = "Observed Yield")
plot(pred, breaks = cuts2, col=brewer.pal(8, "RdYlBu"), main = "Predicted (2D-CNN)", add=T)
plot(yld.5dm, breaks = cuts2, col=brewer.pal(8, "RdYlBu"), main = "Observed Yield")
plot(pred, breaks = cuts2, col=brewer.pal(8, "RdYlBu"), main = "Predicted (2D-CNN)")
plot(r1_linear, breaks = cuts2, col=brewer.pal(8, "RdYlBu"), main = "Predicted (linear)")
cuts3 <- c(-100, -75, -50, -25, 0, 25, 50, 75, 100)
cnn_diff <- yld.5dm - pred
lin_diff <- yld.5dm - r1_linear
plot(cnn_diff, breaks = cuts3, col=brewer.pal(8, "RdYlBu"), main = "Predicted (2D-CNN)")
plot(lin_diff, breaks = cuts3, col=brewer.pal(8, "RdYlBu"), main = "Predicted (linear)")
plot(cnn_diff, breaks = cuts3, col=brewer.pal(8, "RdYlBu"), main = "2D-CNN")
plot(lin_diff, breaks = cuts3, col=brewer.pal(8, "RdYlBu"), main = "linear")
r1_linear
plot(lin_diff, breaks = cuts3, col=brewer.pal(8, "RdYlBu"), main = "linear")
daystack
