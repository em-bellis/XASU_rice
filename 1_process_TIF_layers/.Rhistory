scale_linetype(name="Fold") +
ylab("RMSE") +
theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.3)
#ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name)) + geom_line(size=0.4) + facet_grid(Set~Model) + theme_minimal() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) + scale_color_manual(values = c("grey70", "black"), name="Dataset", labels=c("Train", "Validation")) + scale_linetype(name="Fold") + ylab("RMSE") + theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.2)
ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name, lty=name)) +
geom_line(size=0.25) + facet_grid(Set~Model) +
theme_bw() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) +
scale_color_manual(values = c("black","grey70", "grey50"), name="Dataset", labels=c("Test", "Train", "Validation")) +
scale_linetype(name="Fold") +
ylab("RMSE") +
theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.3)
ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name, lty=name)) +
geom_line(size=0.25) + facet_grid(Set~Model) +
theme_bw() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) +
scale_color_manual(values = c("black","grey70", "grey50"), name="Dataset", labels=c("Test", "Train", "Validation")) +
scale_linetype(name="Dataset") +
ylab("RMSE") +
theme(axis.text.x = element_text(angle = 90, vjust=0.4))
library(lubridate)
library(ggplot2)
library(tidyverse)
rice <- read.csv('rice_remote_sensing - Sheet1.csv', header=T)
rice$Date <- as.Date(rice$Date, "%m-%d-%Y")
rice <- subset(rice, Date != "2019-06-13")
#rice.long <- rice %>% pivot_longer(c(Train_MSE, Val_MSE))
rice.long <- rice %>% pivot_longer(c(Train_MSE, Val_MSE, Test_MSE))
ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name, lty=name)) +
geom_line(size=0.25) + facet_grid(Set~Model) +
theme_bw() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) +
scale_color_manual(values = c("black","grey70", "grey50"), name="Dataset", labels=c("Test", "Train", "Validation")) +
scale_linetype(name="Dataset", labels=c("Test", "Train", "Validation")) +
ylab("RMSE") +
theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.3)
#ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name)) + geom_line(size=0.4) + facet_grid(Set~Model) + theme_minimal() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) + scale_color_manual(values = c("grey70", "black"), name="Dataset", labels=c("Train", "Validation")) + scale_linetype(name="Fold") + ylab("RMSE") + theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.2)
library(lubridate)
library(ggplot2)
library(tidyverse)
rice <- read.csv('rice_remote_sensing - Sheet1.csv', header=T)
rice$Date <- as.Date(rice$Date, "%m-%d-%Y")
rice <- subset(rice, Date != "2019-06-13")
#rice.long <- rice %>% pivot_longer(c(Train_MSE, Val_MSE))
rice.long <- rice %>% pivot_longer(c(Train_MSE, Val_MSE, Test_MSE))
ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name, lty=name)) +
geom_line(size=0.25) + facet_grid(Set~Model) +
theme_bw() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) +
scale_color_manual(values = c("black","grey70", "grey50"), name="Dataset", labels=c("Test", "Train", "Validation")) +
scale_linetype(name="Dataset", labels=c("Test", "Train", "Validation")) +
ylab("RMSE") +
theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.3)
#ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name)) + geom_line(size=0.4) + facet_grid(Set~Model) + theme_minimal() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) + scale_color_manual(values = c("grey70", "black"), name="Dataset", labels=c("Train", "Validation")) + scale_linetype(name="Fold") + ylab("RMSE") + theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.2)
ggplot(rice.long, aes(x=Date, y=sqrt(value), col=name, lty=name)) +
geom_line(size=0.25) + facet_grid(Set~Model) +
theme_bw() + geom_hline(yintercept = sqrt(17.3)^2, col="red", lty=2) +
scale_color_manual(values = c("black","grey70", "grey50"), name="Dataset", labels=c("Test", "Train", "Validation")) +
scale_linetype(name="Dataset", labels=c("Test", "Train", "Validation")) +
ylab("RMSE") +
theme(axis.text.x = element_text(angle = 90, vjust=0.4))#+ geom_point(size=0.3)
knitr::opts_chunk$set(echo = TRUE, root.dir = '~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
library(reticulate)
use_python('/opt/anaconda2/envs/py36/bin/python')
py_config()
#conda_create("r-reticulate_rice")
use_condaenv("r-reticulate_rice")
#conda_install("r-reticulate_rice", "tensorflow")
library(reticulate)
#use_python('/opt/anaconda2/envs/py36/bin/python')
py_config()
#conda_create("r-reticulate_rice")
use_condaenv("r-reticulate_rice")
#conda_install("r-reticulate_rice", "tensorflow")
#conda_install("r-reticulate_rice", "tensorflow")
conda_list("r-reticulate_rice")
#conda_install("r-reticulate_rice", "tensorflow")
condaenv_list("r-reticulate_rice")
#conda_install("r-reticulate_rice", "tensorflow")
conda_env_list("r-reticulate_rice")
library(reticulate)
#use_python('/opt/anaconda2/envs/py36/bin/python')
py_config()
#conda_create("r-reticulate_rice")
use_condaenv("r-reticulate_rice")
#conda_install("r-reticulate_rice", "tensorflow")
conda_env_list("r-reticulate_rice")
reticulate::py_discover_config("tensorflow")
library(reticulate)
use_condaenv("r-reticulate_rice")
#use_python('/opt/anaconda2/envs/py36/bin/python')
py_config()
#conda_create("r-reticulate_rice")
library(reticulate)
use_condaenv("r-reticulate_rice")
py_config()
#use_python('/opt/anaconda2/envs/py36/bin/python')
#conda_create("r-reticulate_rice")
knitr::opts_chunk$set(echo = TRUE, root.dir = '~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
library(reticulate)
use_condaenv("r-reticulate_rice")
py_config()
#use_python('/opt/anaconda2/envs/py36/bin/python')
#conda_create("r-reticulate_rice")
library(reticulate)
use_python('/opt/anaconda2/envs/py36/bin/python')
use_condaenv("r-reticulate_rice")
reticulate::py_config()
#use_python('/opt/anaconda2/envs/py36/bin/python')
#conda_create("r-reticulate_rice")
library(reticulate)
#use_python('/opt/anaconda2/envs/py36/bin/python')
use_condaenv("r-reticulate_rice")
reticulate::py_config()
#use_python('/opt/anaconda2/envs/py36/bin/python')
#conda_create("r-reticulate_rice")
library(reticulate)
#use_python('/opt/anaconda2/envs/py36/bin/python')
use_condaenv("r-reticulate_rice")
reticulate::py_config()
#use_python('/opt/anaconda2/envs/py36/bin/python')
#conda_create("r-reticulate_rice")
library(reticulate)
use_python('/Users/ebellis/Library/r-miniconda/envs/r-reticulate_rice/bin/python')
use_condaenv("r-reticulate_rice")
reticulate::py_config()
#use_python('/opt/anaconda2/envs/py36/bin/python')
#conda_create("r-reticulate_rice")
install.packages('tensorflow')
library(tensorflow)
library(reticulate)
use_condaenv("r-reticulate_rice", required=T)
library(reticulate)
use_python('/Users/ebellis/Library/r-miniconda/envs/r-reticulate_rice/bin/python')
use_condaenv("r-reticulate_rice", required = T)
library(reticulate)
use_python('/Users/ebellis/Library/r-miniconda/envs/r-reticulate_rice/bin/python', required = T)
#use_python('/Users/ebellis/Library/r-miniconda/envs/r-reticulate_rice/bin/python', required = T)
use_condaenv("r-reticulate_rice", required = T)
repl_python
library(reticulate)
repl_python()
#use_python('/Users/ebellis/Library/r-miniconda/envs/r-reticulate_rice/bin/python', required = T)
#use_condaenv("r-reticulate_rice", required = T)
#reticulate::py_config()
#use_python('/opt/anaconda2/envs/py36/bin/python')
#conda_create("r-reticulate_rice")
#repl_python()
use_python('/Users/ebellis/Library/r-miniconda/envs/r-reticulate_rice/bin/python', required = T)
knitr::opts_chunk$set(echo = TRUE, root.dir = '~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
library(reticulate)
#use_python('/Users/ebellis/Library/r-miniconda/envs/r-reticulate_rice/bin/python', required = T)
use_condaenv("py36", required = T)
reticulate::py_config() # had to change .Renviron file on my system to get python version from conda env and load packages
#repl_python()
library(reticulate)
#use_python('/Users/ebellis/Library/r-miniconda/envs/r-reticulate_rice/bin/python', required = T)
use_condaenv("r-reticulate_rice", required = T)
reticulate::py_config() # had to change .Renviron file on my system to get python version from conda env and load packages
#repl_python()
library(raster)
yld
raster("/Volumes/ABISSD/Yield.tif")
library(sf)
library(sp)
?CRS
version()
version
grades <- read.table('~/Desktop/cs1114_grades.txt', header = T)
grades <- read.table('~/Desktop/cs1114_grades.txt', header = T)
head(grades)
library(ggplot2)
library(tidyverse)
ggplot(grades, aes(x = Exam2 - Exam1)) + geom_histogram()
ggplot(grades, aes(x = Exam2 - Exam1)) + geom_histogram(bins = 30)
ggplot(grades, aes(x = Exam2 - Exam1)) + geom_histogram(bins = 10)
ggplot(grades, aes(x = Exam2 - Exam1)) + geom_histogram(bins = 20)
median(grades$Exam2 - grades$Exam1)
mean(grades$Exam2 - grades$Exam1)
mean(grades$Exam1)
mean(subset(grades$Exam1 != 0))
mean(subset(grades[Exam1 != 0]$Exam1))
mean(subset(grades[grades$Exam1 != 0]$Exam1))
subset(grades$Exam1)
subset(grades$Exam1 != 1)
subset(grades$Exam1 != 0)
subset(grades, grades$Exam1 != 0)
mean(subset(grades, grades$Exam1 != 0)$Exam1)
mean(subset(grades, grades$Exam1 != 0)$Exam2)
mean(grades$Exam2)
median(grades$Exam2)
tmp <- pivot_wider(grades)
tmp
tmp <- pivot_longer(grades)
tmp <- pivot_longer(grades, cols=1:2)
tmp
ggplot(tmp, aes(x = value, col = name)) + geom_histogram()
ggplot(tmp, aes(x = value, col = name)) + geom_density()
ggplot(tmp, aes(x = value, col = name)) + geom_density() + xlim(c(25,100))
ggplot(tmp, aes(x = value, col = name)) + geom_density() + xlim(c(25,100)) + theme_grey()
ggplot(tmp, aes(x = value, col = name)) + geom_density() + xlim(c(25,100)) + theme_classic()
ggplot(tmp, aes(x = value, col = name)) + geom_density() + xlim(c(25,100)) + theme_grey()
ggplot(tmp, aes(x = value, col = name)) + geom_density() + xlim(c(25,100)) + theme_light()
ggplot(tmp, aes(x = value, col = name)) + geom_density() + xlim(c(25,100)) + theme_dark()
ggplot(tmp, aes(x = value, col = name)) + geom_density() + xlim(c(25,100)) + theme_light()
ggplot(tmp, aes(x = value, col = name)) + geom_density() + xlim(c(25,100)) + theme_minimal()
ggplot(tmp, aes(x = value, fill = name)) + geom_density() + xlim(c(25,100)) + theme_minimal()
ggplot(tmp, aes(x = value, fill = name)) + geom_density(alpha=0.5) + xlim(c(25,100)) + theme_minimal()
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(alpha=0.5) + xlim(c(25,100)) + theme_minimal()
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(alpha=0.5) + xlim(c(25,100)) + theme_minimal() + facet_grid()
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(alpha=0.5) + xlim(c(25,100)) + theme_minimal() + facet_grid(.~name)
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(alpha=0.5) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.)
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram() + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.)
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black") + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.)
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black", bins = 20) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.)
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black", breaks = c(60, 70, 80, 90)) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.)
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black", breaks = c(55, 60, 65, 70, 75, 80, 85, 90, 95)) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.)
nrow(subset(grades$Exam2>= 80))
nrow(subset(grades, grades$Exam2>= 80))
(subset(grades, grades$Exam2>= 80))
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black", breaks = c(50, 65, 69, 70, 74, 79, 85, 89, 90, 94)) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.)
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black", breaks = c(60, 70, 80, 90)) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.)
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black", breaks = c(55, 60, 65, 70, 75, 80, 85, 90, 95)) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.)
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black", breaks = c(55, 59.5, 64.5, 69.5, 74.5, 79.5, 84.5, 89.5, 94.5)) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.)
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black", breaks = c(55, 60, 65, 70, 75, 80, 85, 90, 95)) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.)
ggplot(tmp, aes(x = value, fill = name)) + geom_density(alpha=0.5) + xlim(c(25,100)) + theme_minimal()
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black", bins = 40) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.)
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black", bins = 30) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.)
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black", bins = 25) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.)
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black", bins = 10) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.)
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black", bins = 10, breaks = c(0,60,70,80,90,100)) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.)
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black", bins = 10, breaks = c(0,59.5,70,80,90,100)) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.)
grades
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black", bins = 10, breaks = c(0,49.5, 59.5, 69.5, 79.5, 89.5,99.5)) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.)
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black", bins = 10, breaks = c(0,49.5, 59.5, 69.5, 79.5, 89.5,99.5)) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.) + scale_fill_manual(name = "")
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black", bins = 10, breaks = c(0,49.5, 59.5, 69.5, 79.5, 89.5,99.5)) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.) + scale_fill_manual(names() = "")
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black", bins = 10, breaks = c(0,49.5, 59.5, 69.5, 79.5, 89.5,99.5)) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.) + scale_fill_manual(label = "")
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black", breaks = c(0,49.5, 59.5, 69.5, 79.5, 89.5,99.5)) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.) + scale_fill_manual(label = "")
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black", breaks = c(49.5, 59.5, 69.5, 79.5, 89.5,99.5)) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.) + scale_fill_manual(label = "")
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black", breaks = c(49, 59, 69, 79, 89,99)) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.) + scale_fill_manual(label = "")
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black",bins = 10 breaks = c(49, 59, 69, 79, 89,99)) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.) + scale_fill_manual(label = "")
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black",bins = 10, breaks = c(49, 59, 69, 79, 89,99)) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.) + scale_fill_manual(label = "")
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black",bins = 10, breaks = c(0, 49, 59, 69, 79, 89,99)) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.) + scale_fill_manual(label = "")
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black",bins = 10, breaks = c(0, 49, 59, 69, 79, 89,99)) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.) + scale_fill_manual(label = "", values = c("red","blue"))
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black",bins = 10, breaks = c(0, 49, 59, 69, 79, 89,99)) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.)
grades
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black",bins = 10, breaks = c(0, 49, 59, 69, 79.5, 89,99)) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.)
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black",bins = 10, breaks = c(0, 49, 59, 69, 79.5, 89,99)) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.) + theme(legend. position = "none")
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black",bins = 10, breaks = c(0, 49, 59, 69, 79.5, 89,99)) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.) + theme(legend. position = "none")
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black",bins = 10, breaks = c(0, 49, 59, 69, 79.5, 89,99)) + xlim(c(25,100)) + theme_minimal() + facet_grid(name~.) + theme(legend.position = "none")
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black",bins = 10, breaks = c(0, 49, 59, 69, 79.5, 89,99)) + xlim(c(40,100)) + theme_minimal() + facet_grid(name~.) + theme(legend.position = "none")
ggplot(tmp, aes(x = value, fill = name)) + geom_histogram(col = "black",bins = 10, breaks = c(0, 49, 59, 69, 79.5, 89,99)) + xlim(c(40,100)) + theme_minimal() + facet_grid(name~.) + theme(legend.position = "none") + xlab("Score")
buac_to_tha <- function(bushels) {
return(bushels * 46 /  2204.62 * 2.47105)
}
buac_to_tha(175.8)
buac_to_tha(17.3)
buac_to_tha(39)
buac_to_tha(238)
buac_to_tha(281)
295
buac_to_tha(295)
buac_to_tha(2187)
buac_to_tha(187)
buac_to_tha(259)
buac_to_tha(163)
buac_to_tha(245)
buac_to_tha(198)
sqrt(8.4)
2.9/9
library(lubridate)
library(ggplot2)
library(tidyverse)
library(wesanderson)
rice <- read.csv('rice_remote_sensing - Sheet1.csv', header=T)
rice$Date <- as.Date(rice$Date, "%m-%d-%Y")
rice <- subset(rice, Date != "2019-06-13")
#rice.long <- rice %>% pivot_longer(c(Train_MSE, Val_MSE))
rice.long <- rice %>% pivot_longer(c(Train_MSE, Val_MSE, Test_MSE))
rice$id <- paste0(rice$Model, rice$Date, sep="_")
rice.long$id <- paste0(rice.long$Model, rice.long$Date, sep="_")
rice.long$name <- factor(rice.long$name,      # Reordering group factor levels
levels = c("Test_MSE", "Val_MSE", "Train_MSE"),
labels = c("Test","Validation","Train"))
fig2 <- ggplot(rice.long, aes(x=Date, y=value, color = Model, group=id, pch = Set)) +
geom_point(position = position_dodge(width = 5), size = 1.1, alpha = 0.5) +
theme_light() +
theme(panel.grid.minor.x = element_blank()) +
geom_line(position = position_dodge(width = 5), size = 0.3) +
scale_color_manual(values = wes_palette("Zissou1", 5, type = c("discrete"))) +
facet_grid(name~.) +
labs(shape = "Fold") +
ylab("MSE")
fig2
yld_stats <- rice.long %>%
#filter(name == "Train") %>%
select(Model, Set, Date, name, value) %>%
group_by(Model, Date, name) %>%
summarize(mean_yld = mean(value), sd_yld = sd(value))
fig3 <- ggplot(yld_stats, aes(x=Date, y=mean_yld, color=Model)) +
geom_point(alpha = 0.7, size=0.7) +
geom_line() +
theme_light() +
theme(panel.grid.minor.x = element_blank()) +
ylab("Average MSE") +
facet_grid(name~.) +
scale_color_manual(values = wes_palette("Zissou1", 5, type = c("discrete")))
fig3
yld_stats
subset(yld_stats, name == "Test")
as.data.frame(subset(yld_stats, name == "Test"))
as.data.frame(subset(yld_stats, name == "Test" && model == "2DCNN"))
as.data.frame(subset(yld_stats, name == "Test" && Model == "2DCNN"))
as.data.frame(subset(yld_stats, name == "Test" & Model == "2DCNN"))
as.data.frame(subset(yld_stats, name == "Test" & Model == "2DCNN"))$mean_yld
min(as.data.frame(subset(yld_stats, name == "Test" & Model == "2DCNN"))$mean_yld)
buac_to_tha(170.5)
sqrt(buac_to_tha(170.5))
sqrt(buac_to_tha(170.5))/9.06
15*15
15/200
sqrt(buac_to_tha(170.5))
3/9.06
3/12
17*2
17^2
17/175
buac_to_tha(17)/buac_to_tha(175)
sqrt(170.5)
buac_to_tha(13.06)
buac_to_tha(13.06)/9
subset(yld_stats, name == "Test")
subset(yld_stats, name == "Test" & Model == "3DCNN")
buac_to_tha(13.06)/9.06
buac_to_tha(sqrt(234))/9.06
subset(yld_stats, name == "Test" & Model == "2DCNN")
buac_to_tha(sqrt(209))/9.06
library(raster)
library(rgdal)
library(sf)
library(stringr)
library(ggplot2)
library(RColorBrewer)
setwd('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/get_max_val.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/process_VIs.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/output_labels.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/create_daystack.R')
source('~/Documents/GitHub/XASU_rice/1_process_TIF_layers/output_images.R')
path_to <- "/Volumes/ABISSD/"
## get yield data layer, downsample, mask; base all other layers on this layer
yld <- raster(paste0(path_to,'Yield.tif')) # utm, 5 cm resolution
yld.5 <- aggregate(yld, 10) # 0.5 x 0.5 m resolution
crop_extent <- readOGR(paste0(path_to,"04-11-2019/Carr_N_Without_Ditch.shp"))
yld.5d <- crop(yld.5, crop_extent)
yld.5dm <- mask(yld.5d, crop_extent) # 5616 cells; 5235 of these are non-NA
## divide into training, testing and validation sets=
## Set B
e.train <- c(617769.6, 618159.6, 3828596, 3828776)
e.val <- c(617769.6,617964.6,3828776, 3828956)
e.test <- c(617964.6,618159.6,3828776, 3828956)
## process all other layers (downsample, crop, mask); make raster stacks for each day; split into test, train, and validation sets; split each of these into 5x5 pixel subimages and then save each image and channel separately as .csv file
flydays <- c("04-11-2019","05-21-2019","06-13-2019","06-29-2019","07-11-2019","08-01-2019", "08-13-2019", "08-21-2019","08-28-2019","09-07-2019","09-13-2019")
channels <- c("CIgreen.tif","GNDVI.tif","NAVI.tif","NDVI.tif","RENDVI.tif","TGI.tif","Thermal.tif")
path_to_raster <- "/Volumes/ABISSD/"
vis.list <- str_replace(channels, '.tif', '')
mostnas_idx <- which.max(as.matrix(cellStats(daystack, stat='countNA')))
yld.dayna <- mask(yld.5dm, daystack[[mostnas_idx]])
daystack <- mask(daystack, daystack[[mostnas_idx]])
# predict
r1_linear <- raster::predict(daystack, mod, progress = 'text')
pred <- raster('~/projectCNN_Aug01.tif')
flydays <- c("04-11-2019","05-21-2019","06-29-2019","07-11-2019","08-01-2019", "08-13-2019", "08-21-2019","08-28-2019","09-07-2019","09-13-2019")
channels <- c("CIgreen.tif","GNDVI.tif","NAVI.tif","NDVI.tif","RENDVI.tif","TGI.tif","Thermal.tif")
path_to_raster <- "/Volumes/ABISSD/"
vis.list <- str_replace(channels, '.tif', '')
############################### Output model performance by day
## set up dataframe
results <- data.frame(row.names = 1:length(flydays), Set = "B", Date = flydays, Train_MSE = "", Val_MSE = "", Test_MSE = "")
daystack <- create_daystack(path_to_raster, flydays[j], channels, yld.5dm)
# mask so all have same number of NA's and number of images is same
mostnas_idx <- which.max(as.matrix(cellStats(daystack, stat='countNA')))
yld.dayna <- mask(yld.5dm, daystack[[mostnas_idx]])
daystack <- mask(daystack, daystack[[mostnas_idx]])
daystack <- stack(daystack, yld.dayna)
# split into test, validation, training sets
train <- crop(daystack, e.train)
val <- crop(daystack, e.val)
test <- crop(daystack, e.test)
# create dataframe for each set
train.df <- as.data.frame(na.omit(as.matrix(train))) # drop any rows with NA for any vegetation index
test.df <- as.data.frame(na.omit(as.matrix(test)))
val.df <- as.data.frame(na.omit(as.matrix(val)))
# fit linear model
mod <- lm(Yield ~ CIgreen + GNDVI + NAVI + NDVI + RENDVI + TGI + Thermal, data = train.df)
# calculate MSE
e.train <- c(617769.6, 618159.6, 3828596, 3828776)
e.val <- c(617769.6,617964.6,3828776, 3828956)
e.test <- c(617964.6,618159.6,3828776, 3828956)
j = 5
daystack <- create_daystack(path_to_raster, flydays[j], channels, yld.5dm)
# mask so all have same number of NA's and number of images is same
mostnas_idx <- which.max(as.matrix(cellStats(daystack, stat='countNA')))
yld.dayna <- mask(yld.5dm, daystack[[mostnas_idx]])
daystack <- mask(daystack, daystack[[mostnas_idx]])
daystack <- stack(daystack, yld.dayna)
# split into test, validation, training sets
train <- crop(daystack, e.train)
val <- crop(daystack, e.val)
test <- crop(daystack, e.test)
# create dataframe for each set
train.df <- as.data.frame(na.omit(as.matrix(train))) # drop any rows with NA for any vegetation index
test.df <- as.data.frame(na.omit(as.matrix(test)))
val.df <- as.data.frame(na.omit(as.matrix(val)))
# fit linear model
mod <- lm(Yield ~ CIgreen + GNDVI + NAVI + NDVI + RENDVI + TGI + Thermal, data = train.df)
# predict
r1_linear <- raster::predict(daystack, mod, progress = 'text')
pred <- raster('~/projectCNN_Aug01.tif')
############################### output project for 1 day based on linear model
j = 6
daystack <- create_daystack(path_to_raster, flydays[j], channels, yld.5dm) # raster stack for a single day
# predict
r1_linear <- raster::predict(daystack, mod, progress = 'text')
cuts=c(10, 150,160,170,180,190,200,250)
cuts2=c(10, 154,166,178,187,194,250) #  quantile(yld.5dm, c(0.1, 0.25, 0.5, 0.75, 0.9))
cuts3 <- c(-100, -75, -50, -25, 0, 25, 50, 75, 100)
plot(yld.5dm, breaks = cuts2, col=brewer.pal(6, "RdYlBu"), main = "Observed Yield")
plot(pred, breaks = cuts2, col=brewer.pal(6, "YlGnBu"), main = "Predicted (2D-CNN)")
plot(r1_linear, breaks = cuts2, col=brewer.pal(6, "YlGnBu"), main = "Predicted (linear)")
# predict
r1_linear <- raster::predict(daystack, mod, progress = 'text')
plot(pred, breaks = cuts2, col=brewer.pal(6, "YlGnBu"), main = "Predicted (2D-CNN)")
plot(r1_linear, breaks = cuts2, col=brewer.pal(6, "YlGnBu"), main = "Predicted (linear)")
plot(pred, breaks = cuts2, col=brewer.pal(6, "YlGnBu"), main = "Predicted (2D-CNN)")
j
j = 5
mod
flydays[j]
# predict
r1_linear <- raster::predict(daystack, mod, progress = 'text')
plot(r1_linear, breaks = cuts2, col=brewer.pal(6, "YlGnBu"), main = "Predicted (linear)")
r1_linear
cnn_diff <- yld.5dm - pred
lin_diff <- yld.5dm - r1_linear
cnn_lin <- pred - r1_linear
plot(cnn_diff, breaks = cuts4, col=brewer.pal(10, "RdYlBu"), main = "2D-CNN")
plot(cnn_diff, breaks = cuts3, col=brewer.pal(10, "RdYlBu"), main = "2D-CNN")
plot(lin_diff, breaks = cuts3, col=brewer.pal(10, "RdYlBu"), main = "linear")
plot(cnn_lin, breaks = cuts3, col=brewer.pal(8, "RdYlBu"), main = "linear")
hist(cnn_diff)
hist(lin_diff)
hist(cnn_diff)
mod
plot(cnn_diff, breaks = cuts3, col=brewer.pal(10, "RdYlBu"), main = "2D-CNN")
plot(lin_diff, breaks = cuts3, col=brewer.pal(10, "RdYlBu"), main = "linear")
cnn_diff <- yld.5dm - pred
lin_diff <- yld.5dm - r1_linear
plot(cnn_diff, breaks = cuts3, col=brewer.pal(10, "RdYlBu"), main = "2D-CNN")
plot(lin_diff, breaks = cuts3, col=brewer.pal(10, "RdYlBu"), main = "linear")
plot(yld.5dm, breaks = cuts2, col=brewer.pal(6, "RdYlBu"), main = "Observed Yield")
plot(pred, breaks = cuts2, col=brewer.pal(6, "YlGnBu"), main = "Predicted (2D-CNN)")
plot(r1_linear, breaks = cuts2, col=brewer.pal(6, "YlGnBu"), main = "Predicted (linear)")
cnn_diff <- yld.5dm - pred
lin_diff <- yld.5dm - r1_linear
plot(cnn_diff, breaks = cuts3, col=brewer.pal(10, "RdYlBu"), main = "2D-CNN")
plot(cnn_diff, breaks = cuts3, col=brewer.pal(8, "RdYlBu"), main = "2D-CNN")
plot(lin_diff, breaks = cuts3, col=brewer.pal(8, "RdYlBu"), main = "linear")
flydays
flydays[j]
vis.list <- str_replace(channels, "08-01-2019", '.tif', '')
############################### output project for 1 day based on linear model
daystack <- create_daystack(path_to_raster, "08-01-2019", channels, yld.5dm) # raster stack for a single day
# mask so all have same number of NA's and number of images is same
mostnas_idx <- which.max(as.matrix(cellStats(daystack, stat='countNA')))
yld.dayna <- mask(yld.5dm, daystack[[mostnas_idx]])
daystack <- mask(daystack, daystack[[mostnas_idx]])
# predict
r1_linear <- raster::predict(daystack, mod, progress = 'text')
pred <- raster('~/projectCNN_Aug01.tif')
# plot
cuts=c(10, 150,160,170,180,190,200,250)
cuts2=c(10, 154,166,178,187,194,250) #  quantile(yld.5dm, c(0.1, 0.25, 0.5, 0.75, 0.9))
cuts3 <- c(-100, -75, -50, -25, 0, 25, 50, 75, 100)
plot(yld.5dm, breaks = cuts2, col=brewer.pal(6, "RdYlBu"), main = "Observed Yield")
plot(pred, breaks = cuts2, col=brewer.pal(6, "YlGnBu"), main = "Predicted (2D-CNN)")
plot(r1_linear, breaks = cuts2, col=brewer.pal(6, "YlGnBu"), main = "Predicted (linear)")
cnn_diff <- yld.5dm - pred
lin_diff <- yld.5dm - r1_linear
plot(cnn_diff, breaks = cuts3, col=brewer.pal(8, "RdYlBu"), main = "2D-CNN")
plot(lin_diff, breaks = cuts3, col=brewer.pal(8, "RdYlBu"), main = "linear")
buac_to_tha(100)
buac_to_tha(75)
buac_to_tha(50)
buac_to_tha(25)
plot(pred, breaks = cuts2, col=brewer.pal(6, "YlGnBu"), main = "Predicted (2D-CNN)")
plot(r1_linear, breaks = cuts2, col=brewer.pal(6, "YlGnBu"), main = "Predicted (linear)")
buac_to_tha(54)
pred
matrix(data = NA, nrow = 5, ncol = 5)
buac_to_tha <- function(bushels) {
return(bushels * 46 /  2204.62 * 2.47105)
}
buac_to_tha(194)
buac_to_tha(154)
buac_to_tha(300^2)
buac_to_tha(300^0.5)
buac_to_tha(sqrt(300))
buac_to_tha(sqrt(200))
buac_to_tha(sqrt(170))
buac_to_tha(sqrt(170))/9
buac_to_tha(sqrt(300))/9
pred <- raster('~/projectCNN_Aug01_v2.tif')
plot(pred, breaks = cuts2, col=brewer.pal(6, "YlGnBu"), main = "Predicted (2D-CNN)")
cnn_diff <- yld.5dm - pred
plot(cnn_diff, breaks = cuts3, col=brewer.pal(8, "RdYlBu"), main = "2D-CNN")
